.daterangepicker {
  position: absolute;
  max-width: none;
  padding: 0;
  display: none;
  margin: 0.4rem 0.875rem 0;
}
.daterangepicker tbody:before {
  content: "@";
  display: block;
  line-height: 6px;
  text-indent: -99999px;
}
[dir=rtl] .daterangepicker {
  direction: rtl !important;
}
.daterangepicker table thead tr:first-child {
  height: 52px !important;
  position: relative;
}
.daterangepicker .calendar-table td {
  border-radius: 50rem;
}
.daterangepicker table thead th select,
.daterangepicker table thead td select {
  background-color: transparent;
  font-weight: 600;
}

html:not([dir=rtl]) .daterangepicker .drp-calendar:not(.single).left .prev {
  left: 0.25rem;
}
[dir=rtl] .daterangepicker .drp-calendar:not(.single).left .prev {
  right: 0.25rem;
}
html:not([dir=rtl]) .daterangepicker .drp-calendar:not(.single).right .next {
  right: 0.25rem;
}
[dir=rtl] .daterangepicker .drp-calendar:not(.single).right .next {
  left: 0.25rem;
}

.daterangepicker.auto-apply .drp-buttons {
  display: none;
}

.daterangepicker.show-calendar .drp-calendar,
.daterangepicker.show-calendar .drp-buttons {
  display: block;
}

.daterangepicker .drp-calendar {
  display: none;
  padding: 0.2rem;
}
.daterangepicker .drp-calendar.single .calendar-table {
  border: 0;
}

.daterangepicker.single .drp-selected {
  display: none;
}
.daterangepicker.single .daterangepicker .ranges,
.daterangepicker.single .drp-calendar {
  float: none;
}

.daterangepicker .calendar-table {
  border: 0;
}
.daterangepicker .calendar-table .next,
.daterangepicker .calendar-table .prev {
  position: absolute;
  top: 0.65rem;
  min-width: unset;
  height: 1.75rem;
  width: 1.75rem;
  border-radius: 50rem;
  display: flex;
  justify-content: center;
  align-items: center;
}
.daterangepicker .calendar-table .next span,
.daterangepicker .calendar-table .prev span {
  display: inline-block;
  border-width: 0 1px 1px 0;
  border-style: solid;
  border-radius: 0;
  height: 0.5rem;
  width: 0.5rem;
}
.daterangepicker .calendar-table .prev span {
  margin-right: -0.25rem;
  transform: rotate(135deg);
}
[dir=rtl] .daterangepicker .calendar-table .prev span {
  margin-left: -0.25rem;
  margin-right: 0;
  transform: rotate(-45deg);
}
.daterangepicker .calendar-table .next span {
  margin-left: -0.25rem;
  transform: rotate(-45deg);
}
[dir=rtl] .daterangepicker .calendar-table .next span {
  margin-left: 0;
  margin-right: -0.25rem;
  transform: rotate(135deg);
}
.daterangepicker .calendar-table table {
  border: 0;
  border-spacing: 0;
  border-collapse: collapse;
  margin: 0;
  width: 100%;
}
.daterangepicker .calendar-table th,
.daterangepicker .calendar-table td {
  vertical-align: middle;
  min-width: 2rem;
  height: 2rem;
  width: 2rem;
  line-height: calc(2rem - 2px);
  white-space: nowrap;
  text-align: center;
  cursor: pointer;
}

.daterangepicker .single .next {
  float: right;
}
html:not([dir=rtl]) .daterangepicker .single .next {
  right: 0.625rem;
}
[dir=rtl] .daterangepicker .single .next {
  left: 0.625rem;
}
html:not([dir=rtl]) .daterangepicker .single .prev {
  right: 3.125rem;
}
[dir=rtl] .daterangepicker .single .prev {
  left: 3.125rem;
}
.daterangepicker .single th.month {
  position: absolute;
  top: 0.5rem;
}
html:not([dir=rtl]) .daterangepicker .single th.month {
  text-align: left;
  left: 0.562rem;
}
[dir=rtl] .daterangepicker .single th.month {
  text-align: right;
  right: 0.562rem;
}

html:not([dir=rtl]) .daterangepicker td.start-date:not(.end-date) {
  border-bottom-right-radius: 0 !important;
  border-top-right-radius: 0 !important;
}
html:not([dir=rtl]) .daterangepicker td.end-date:not(.start-date) {
  border-bottom-left-radius: 0 !important;
  border-top-left-radius: 0 !important;
}
.daterangepicker td.in-range:not(.start-date):not(.end-date) {
  border-radius: 0 !important;
}
[dir=rtl] .daterangepicker td.start-date:not(.end-date) {
  border-bottom-left-radius: 0 !important;
  border-top-left-radius: 0 !important;
}
[dir=rtl] .daterangepicker td.end-date:not(.start-date) {
  border-bottom-right-radius: 0 !important;
  border-top-right-radius: 0 !important;
}

.daterangepicker td.disabled,
.daterangepicker option.disabled {
  cursor: not-allowed;
  text-decoration: line-through;
}

.daterangepicker th.month {
  width: auto;
}

.daterangepicker select.monthselect, .daterangepicker select.yearselect {
  height: auto;
  padding: 1px;
  margin: 0;
  border: 0;
  cursor: default;
}
.daterangepicker select:focus-visible {
  outline: 0;
}
.daterangepicker select.monthselect {
  width: 46%;
  margin-right: 2%;
}
[dir=rtl] .daterangepicker select.monthselect {
  margin-left: 2%;
  margin-right: 0;
}
.daterangepicker select.yearselect {
  width: 40%;
}
.daterangepicker select.hourselect, .daterangepicker select.minuteselect, .daterangepicker select.secondselect, .daterangepicker select.ampmselect {
  outline: 0;
  width: 3.125rem;
  padding: 2px;
  margin: 0 auto;
}

.daterangepicker .calendar-time {
  position: relative;
  line-height: 30px;
  text-align: center;
  margin: 0 auto;
}
.daterangepicker .calendar-time select.disabled {
  cursor: not-allowed;
}

.daterangepicker .drp-buttons {
  padding: 0.5rem;
  clear: both;
  display: none;
  text-align: right;
  vertical-align: middle;
  border-top: 1px solid;
}
.daterangepicker .drp-buttons .btn {
  margin-left: 0.6rem;
}
[dir=rtl] .daterangepicker .drp-buttons {
  text-align: left;
}
[dir=rtl] .daterangepicker .drp-buttons .btn {
  margin-left: 0;
  margin-right: 0.6rem;
}

.daterangepicker .drp-selected {
  width: 100%;
  padding-bottom: 0.2rem;
  display: block;
}

.daterangepicker .ranges {
  text-align: left;
  float: none;
  margin: 0;
}
.daterangepicker .ranges ul {
  padding: 0.875rem 0;
  margin: 0 auto;
  list-style: none;
  width: 100%;
}
.daterangepicker .ranges li {
  margin: 0.125rem 0.875rem;
  padding: 0.25rem 1rem;
}
[dir=rtl] .daterangepicker .ranges {
  text-align: right;
}

.daterangepicker.show-calendar .ranges {
  border-bottom: 1px solid;
}
.daterangepicker.show-calendar .ranges:empty {
  display: none;
}

html:not([dir=rtl]) .daterangepicker .drp-calendar.right {
  padding-left: 1px;
}
[dir=rtl] .daterangepicker .drp-calendar.right {
  padding-right: 1px;
}

.light-style .daterangepicker {
  margin-top: 0.25rem;
  z-index: 1091 !important;
  border: 0px solid #dbdade;
  border-radius: 0.375rem;
  width: calc(14.4rem + 0px);
  box-shadow: 0 0.25rem 1rem rgba(165, 163, 174, 0.45);
  background-color: #fff;
}
.light-style .daterangepicker table thead {
  color: #5d596c;
}
.light-style .daterangepicker.drop-up {
  margin-top: -0.25rem;
}
.light-style .daterangepicker.with-week-numbers {
  width: calc(16.4rem + 0px);
}
.light-style .daterangepicker td.active:not(.off) {
  box-shadow: 0 0.125rem 0.25rem rgba(165, 163, 174, 0.3);
}
.light-style .daterangepicker .drp-selected {
  font-size: 0.75rem;
}
.light-style .daterangepicker .drp-buttons {
  border-color: #dbdade;
}
.light-style .daterangepicker .calendar-table thead tr:last-child th {
  border-radius: 0 !important;
  font-size: 0.8125rem;
  font-weight: 600;
}
.light-style .daterangepicker th.month {
  font-weight: 600;
}
.light-style .daterangepicker td.week,
.light-style .daterangepicker th.week {
  color: #6f6b7d;
}
.light-style .daterangepicker td.disabled,
.light-style .daterangepicker option.disabled {
  color: #a5a3ae;
}
.light-style .daterangepicker td.available:not(.active):hover,
.light-style .daterangepicker th.available:hover {
  background-color: #f1f0f2;
}
.light-style .daterangepicker td.off {
  color: #a5a3ae;
}
.light-style .daterangepicker .ranges li {
  cursor: pointer;
  border-radius: 0.375rem;
}
.light-style .daterangepicker .ranges li:hover {
  background-color: rgba(115, 103, 240, 0.08);
  color: #7367f0;
}
.light-style .daterangepicker .calendar-table .next,
.light-style .daterangepicker .calendar-table .prev {
  background-color: #f1f0f2;
}
.light-style .daterangepicker .calendar-table .next span,
.light-style .daterangepicker .calendar-table .prev span {
  border-color: #6f6b7d;
}
.light-style .daterangepicker select {
  color: #5d596c;
}
.light-style .daterangepicker select.hourselect, .light-style .daterangepicker select.minuteselect, .light-style .daterangepicker select.secondselect, .light-style .daterangepicker select.ampmselect {
  background: rgba(75, 70, 92, 0.05);
  font-size: 0.75rem;
  color: #6f6b7d;
  border: 1px solid transparent;
}
.light-style .daterangepicker select.monthselect option, .light-style .daterangepicker select.yearselect option {
  color: #6f6b7d;
  background: #fff;
}
.light-style .daterangepicker select.monthselect option:disabled, .light-style .daterangepicker select.yearselect option:disabled {
  color: #a5a3ae;
}
.light-style .daterangepicker .calendar-time select.disabled {
  color: #b7b5be;
}
@media (min-width: 768px) {
  .light-style .daterangepicker {
    width: auto !important;
  }
  .light-style .daterangepicker:not(.single) .drp-selected {
    width: auto;
    padding: 0;
    display: inline-block;
  }
  .light-style:not([dir=rtl]) .daterangepicker:not(.single) .drp-calendar {
    float: left;
  }
  .light-style:not([dir=rtl]) .daterangepicker:not(.single) .drp-calendar.left {
    padding-right: 0;
    border-right: 1px solid #dbdade;
  }
  .light-style[dir=rtl] .daterangepicker:not(.single) .drp-calendar {
    float: right;
  }
  .light-style[dir=rtl] .daterangepicker:not(.single) .drp-calendar.left {
    padding-left: 0;
    border-left: 1px solid #dbdade;
  }
}
@media (min-width: 992px) {
  .light-style .daterangepicker .ranges {
    border-bottom: 0;
  }
  .light-style:not([dir=rtl]) .daterangepicker .ranges {
    float: left;
  }
  .light-style[dir=rtl] .daterangepicker .ranges {
    float: right;
  }
}

.dark-style .daterangepicker {
  box-shadow: 0 0.25rem 1rem rgba(15, 20, 34, 0.55);
  width: calc(14.4rem + 0px);
  margin-top: 0.25rem;
  background-color: #2f3349;
  border: 0px solid #434968;
  border-radius: 0.375rem;
  z-index: 1091 !important;
}
.dark-style .daterangepicker table thead {
  color: #cfd3ec;
}
.dark-style .daterangepicker.with-week-numbers {
  width: calc(16.4rem + 0px);
}
.dark-style .daterangepicker.drop-up {
  margin-top: -0.25rem;
}
.dark-style .daterangepicker td.active:not(.off) {
  box-shadow: 0 0.125rem 0.25rem rgba(15, 20, 34, 0.4);
}
.dark-style .daterangepicker .drp-selected {
  font-size: 0.75rem;
}
.dark-style .daterangepicker .drp-buttons,
.dark-style .daterangepicker .ranges {
  border-color: #434968;
}
.dark-style .daterangepicker .calendar-table thead tr:last-child th {
  border-radius: 0 !important;
  font-size: 0.8125rem;
  font-weight: 600;
}
.dark-style .daterangepicker th.month {
  font-weight: 600;
}
.dark-style .daterangepicker td.week,
.dark-style .daterangepicker th.week {
  color: #b6bee3;
}
.dark-style .daterangepicker td.disabled,
.dark-style .daterangepicker option.disabled {
  color: #7983bb;
}
.dark-style .daterangepicker td.available:not(.active):hover,
.dark-style .daterangepicker th.available:hover {
  background-color: #363b54;
}
.dark-style .daterangepicker td.off {
  color: #7983bb;
}
.dark-style .daterangepicker .ranges li {
  cursor: pointer;
  border-radius: 0.375rem;
}
.dark-style .daterangepicker .ranges li:hover {
  background-color: rgba(115, 103, 240, 0.08);
  color: #7367f0;
}
.dark-style .daterangepicker .calendar-table .next,
.dark-style .daterangepicker .calendar-table .prev {
  background-color: #363b54;
}
.dark-style .daterangepicker .calendar-table .next span,
.dark-style .daterangepicker .calendar-table .prev span {
  border-color: #b6bee3;
}
.dark-style .daterangepicker select {
  color: #cfd3ec;
}
.dark-style .daterangepicker select.hourselect, .dark-style .daterangepicker select.minuteselect, .dark-style .daterangepicker select.secondselect, .dark-style .daterangepicker select.ampmselect {
  background: rgba(255, 255, 255, 0.8);
  border: 1px solid transparent;
  font-size: 0.75rem;
  color: #b6bee3;
}
.dark-style .daterangepicker select.monthselect option, .dark-style .daterangepicker select.yearselect option {
  color: #b6bee3;
  background: #2f3349;
}
.dark-style .daterangepicker select.monthselect option:disabled, .dark-style .daterangepicker select.yearselect option:disabled {
  color: #7983bb;
}
.dark-style .daterangepicker .calendar-time select.disabled {
  color: #8692d0;
}
@media (min-width: 768px) {
  .dark-style .daterangepicker {
    width: auto !important;
  }
  .dark-style .daterangepicker:not(.single) .drp-selected {
    display: inline-block;
    width: auto;
    padding: 0;
  }
  .dark-style:not([dir=rtl]) .daterangepicker:not(.single) .drp-calendar {
    float: left;
  }
  .dark-style:not([dir=rtl]) .daterangepicker:not(.single) .drp-calendar.left {
    padding-right: 0;
    border-right: 1px solid #434968;
  }
  .dark-style[dir=rtl] .daterangepicker:not(.single) .drp-calendar {
    float: right;
  }
  .dark-style[dir=rtl] .daterangepicker:not(.single) .drp-calendar.left {
    padding-left: 0;
    border-left: 1px solid #434968;
  }
}
@media (min-width: 992px) {
  .dark-style .daterangepicker .ranges {
    border-bottom: 0;
  }
  .dark-style:not([dir=rtl]) .daterangepicker .ranges {
    float: left;
  }
  .dark-style[dir=rtl] .daterangepicker .ranges {
    float: right;
  }
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlbmRvci9saWJzL2Jvb3RzdHJhcC1kYXRlcmFuZ2VwaWNrZXIvYm9vdHN0cmFwLWRhdGVyYW5nZXBpY2tlci5zY3NzIiwidmVuZG9yL3Njc3MvX2N1c3RvbS12YXJpYWJsZXMvX3N1cHBvcnQuc2NzcyIsInZlbmRvci9zY3NzL19ib290c3RyYXAtZXh0ZW5kZWQvX3ZhcmlhYmxlcy5zY3NzIiwiLi4vbm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9zY3NzL21peGlucy9fYnJlYWtwb2ludHMuc2NzcyIsInZlbmRvci9zY3NzL19ib290c3RyYXAtZXh0ZW5kZWQvX3ZhcmlhYmxlcy1kYXJrLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBYUE7RUFDRTtFQUNBO0VBQ0E7RUFDQTtFQUNBOztBQUlFO0VBQ0U7RUFDQTtFQUNBO0VBQ0E7O0FDT0E7RURGRjs7QUFJRjtFQUNFO0VBQ0E7O0FBRUY7RUFDRTs7QUFPRTtBQUFBO0VBQ0U7RUFDQSxhRXVLZTs7O0FEak5qQjtFRHFERTs7QUMzQkY7RUQ4QkU7O0FDeERGO0VEaUVFOztBQ3ZDRjtFRDBDRTs7O0FBTVI7RUFDRTs7O0FBR0Y7QUFBQTtFQUVFOzs7QUFHRjtFQUNFO0VBQ0EsU0FyRndCOztBQXVGeEI7RUFDRTs7O0FBS0Y7RUFDRTs7QUFFRjtBQUFBO0VBRUU7OztBQUlKO0VBQ0U7O0FBR0E7QUFBQTtFQUVFO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTs7QUFHRjtBQUFBO0VBRUU7RUFDQTtFQUNBO0VBQ0E7RUFDQSxRQWhJeUI7RUFpSXpCLE9Bakl5Qjs7QUFvSTNCO0VBQ0U7RUFDQTs7QUN6R0U7RUQ0R0E7RUFDQTtFQUNBOztBQUlKO0VBQ0U7RUFDQTs7QUNwSEU7RUR1SEE7RUFDQTtFQUNBOztBQUlKO0VBQ0U7RUFDQTtFQUNBO0VBQ0E7RUFDQTs7QUFHRjtBQUFBO0VBRUU7RUFDQSxXQW5Ld0I7RUFvS3hCLFFBcEt3QjtFQXFLeEIsT0FyS3dCO0VBc0t4QjtFQUNBO0VBQ0E7RUFDQTs7O0FBT0Y7RUFDRTs7QUNoTEU7RURrTEE7O0FDeEpBO0VEMkpBOztBQ3JMQTtFRDBMQTs7QUNoS0E7RURtS0E7O0FBSUo7RUFDRTtFQUNBOztBQ25NRTtFRHFNQTtFQUNBOztBQzVLQTtFRCtLQTtFQUNBOzs7QUFPRjtFQUNFO0VBQ0E7O0FBR0Y7RUFDRTtFQUNBOztBQUlKO0VBQ0U7O0FBSUE7RUFDRTtFQUNBOztBQUdGO0VBQ0U7RUFDQTs7O0FBS047QUFBQTtFQUVFO0VBQ0E7OztBQUdGO0VBQ0U7OztBQUdBO0VBRUU7RUFDQTtFQUNBO0VBQ0E7RUFDQTs7QUFFRjtFQUNFOztBQUdGO0VBQ0U7RUFDQTs7QUMzT0U7RUQ4T0E7RUFDQTs7QUFJSjtFQUNFOztBQUdGO0VBSUU7RUFDQSxPQXhSMkI7RUF5UjNCO0VBQ0E7OztBQUlKO0VBQ0U7RUFDQTtFQUNBO0VBQ0E7O0FBRUE7RUFDRTs7O0FBSUo7RUFDRTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7O0FBRUE7RUFDRTs7QUN0UkU7RUQwUkY7O0FBRUE7RUFDRTtFQUNBOzs7QUFLTjtFQUNFO0VBQ0EsZ0JBL1R3QjtFQWdVeEI7OztBQUdGO0VBQ0U7RUFDQTtFQUNBOztBQUdBO0VBQ0U7RUFDQTtFQUNBO0VBQ0E7O0FBRUY7RUFDRTtFQUNBOztBQ3ZURTtFRDJURjs7O0FBSUo7RUFDRTs7QUFFQTtFQUNFOzs7QUM3VkU7RURtV0Y7O0FDelVFO0VENFVGOzs7QUFPQTtFQUNFLFlFc05ZO0VGck5aO0VBQ0E7RUFDQSxlRXhOVTtFRnlOVjtFQUNBLFlFbE5PO0VGbU5QLGtCRWhYRTs7QUZrWEY7RUFDRSxPRS9JUzs7QUZpSlg7RUFDRTs7QUFHRjtFQUNFOztBQUdKO0VBQ0UsWUVoT1U7O0FGbU9aO0VBQ0UsV0V4TFM7O0FGMkxYO0VBQ0UsY0V0UFM7O0FGeVBYO0VBQ0U7RUFDQSxXRWpKWTtFRmtKWixhRS9MaUI7O0FGa01uQjtFQUNFLGFFbk1pQjs7QUZzTW5CO0FBQUE7RUFFRSxPRTFTTzs7QUY2U1Q7QUFBQTtFQUVFLE9FM0pPOztBRjhKVDtBQUFBO0VBRUU7O0FBR0Y7RUFDRSxPRXBLTzs7QUZ1S1Q7RUFDRTtFQUNBLGVFblJVOztBRnFSVjtFQUNFLGtCRXJRYTtFRnNRYixPRW5aQzs7QUZ1Wkw7QUFBQTtFQUVFOztBQUNBO0FBQUE7RUFDRSxjRXpVSzs7QUY2VVQ7RUFDRSxPRXJOVzs7QUZzTlg7RUFJRSxZRTFiRztFRjJiSCxXRXJQTztFRnNQUCxPRXJWSztFRnNWTDs7QUFNQTtFQUNFLE9FN1ZHO0VGOFZILFlFemNGOztBRjBjRTtFQUNFLE9FNU1DOztBRmtOVDtFQUNFLE9FaE5POztBQzlNVDtFSGthRTtJQUNFOztFQUVBO0lBQ0U7SUFDQTtJQUNBOztFQUtGO0lBQ0U7O0VBRUE7SUFDRTtJQUNBOztFQU1KO0lBQ0U7O0VBQ0E7SUFDRTtJQUNBOzs7QUc1YlI7RUhtY0U7SUFDRTs7RUFLRTtJQUNFOztFQU9GO0lBQ0U7Ozs7QUFXUjtFQUNFLFlJemJPO0VKMGJQO0VBQ0EsWUU0Q1k7RUYzQ1osa0JJcmFJO0VKc2FKO0VBQ0EsZUVsWVU7RUZtWVY7O0FBRUE7RUFDRSxPSWhiUzs7QUptYlg7RUFDRTs7QUFHRjtFQUNFOztBQUdKO0VBQ0UsWUk3Y1U7O0FKZ2RaO0VBQ0UsV0VqV1M7O0FGb1dYO0FBQUE7RUFFRSxjSTNkUzs7QUo4ZFg7RUFDRTtFQUNBLFdFM1RZO0VGNFRaLGFFeldpQjs7QUY0V25CO0VBQ0UsYUU3V2lCOztBRmdYbkI7QUFBQTtFQUVFLE9JdmZPOztBSjBmVDtBQUFBO0VBRUUsT0loZU87O0FKbWVUO0FBQUE7RUFFRTs7QUFHRjtFQUNFLE9JemVPOztBSjRlVDtFQUNFO0VBQ0EsZUU3YlU7O0FGK2JWO0VBQ0Usa0JFL2FhO0VGZ2JiLE9JempCQzs7QUo2akJMO0FBQUE7RUFFRTs7QUFDQTtBQUFBO0VBQ0UsY0l0aEJLOztBSjBoQlQ7RUFDRSxPSXhmVzs7QUp5Zlg7RUFJRSxZSWhtQkc7RUppbUJIO0VBQ0EsV0VoYU87RUZpYVAsT0luaUJLOztBSnlpQkw7RUFDRSxPSTFpQkc7RUoyaUJILFlJbmdCQTs7QUpvZ0JBO0VBQ0UsT0lqaEJDOztBSnVoQlQ7RUFDRSxPSXJoQk87O0FEbkRUO0VINGtCRTtJQUNFOztFQUVBO0lBQ0U7SUFDQTtJQUNBOztFQUtGO0lBQ0U7O0VBRUE7SUFDRTtJQUNBOztFQU1KO0lBQ0U7O0VBRUE7SUFDRTtJQUNBOzs7QUd2bUJSO0VIOG1CRTtJQUNFOztFQUtFO0lBQ0U7O0VBT0Y7SUFDRSIsImZpbGUiOiJ2ZW5kb3IvbGlicy9ib290c3RyYXAtZGF0ZXJhbmdlcGlja2VyL2Jvb3RzdHJhcC1kYXRlcmFuZ2VwaWNrZXIuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiQHVzZSAnLi4vLi4vc2Nzcy9fYm9vdHN0cmFwLWV4dGVuZGVkL2luY2x1ZGUnIGFzIGxpZ2h0O1xyXG5AdXNlICcuLi8uLi9zY3NzL19ib290c3RyYXAtZXh0ZW5kZWQvaW5jbHVkZS1kYXJrJyBhcyBkYXJrO1xyXG5AaW1wb3J0ICcuLi8uLi9zY3NzL19jdXN0b20tdmFyaWFibGVzL2xpYnMnO1xyXG5cclxuJGRhdGVyYW5nZXBpY2tlci1hcnJvdy1zaXplOiAwLjVyZW0gIWRlZmF1bHQ7XHJcbiRkYXRlcmFuZ2VwaWNrZXItc2VsZWN0LXdpZHRoOiAzLjEyNXJlbSAhZGVmYXVsdDtcclxuJGRhdGVyYW5nZXBpY2tlci1jZWxsLXNpemU6IDJyZW0gIWRlZmF1bHQ7XHJcbiRkYXRlcmFuZ2VwaWNrZXItcGFkZGluZzogMC4ycmVtICFkZWZhdWx0O1xyXG5cclxuLy8gQ2FsY3VsYXRlIHdpZHRoc1xyXG4kZGF0ZXJhbmdlcGlja2VyLXdpZHRoOiAoJGRhdGVyYW5nZXBpY2tlci1jZWxsLXNpemUgKiA3KSsgKCRkYXRlcmFuZ2VwaWNrZXItcGFkZGluZyAqIDIpO1xyXG4kZGF0ZXJhbmdlcGlja2VyLXdpZHRoLXdpdGgtd2Vla3M6ICRkYXRlcmFuZ2VwaWNrZXItd2lkdGggKyAkZGF0ZXJhbmdlcGlja2VyLWNlbGwtc2l6ZTtcclxuXHJcbi5kYXRlcmFuZ2VwaWNrZXIge1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBtYXgtd2lkdGg6IG5vbmU7XHJcbiAgcGFkZGluZzogMDtcclxuICBkaXNwbGF5OiBub25lO1xyXG4gIG1hcmdpbjogMC40cmVtIDAuODc1cmVtIDA7XHJcblxyXG4gIHRib2R5IHtcclxuICAgIC8vISBGSVg6IHBhZGRpbmcgb3IgbWFyZ2luIHRvcCB3aWxsIG5vdCB3b3JrIGluIHRhYmxlXHJcbiAgICAmOmJlZm9yZSB7XHJcbiAgICAgIGNvbnRlbnQ6ICdAJztcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgIGxpbmUtaGVpZ2h0OiA2cHg7XHJcbiAgICAgIHRleHQtaW5kZW50OiAtOTk5OTlweDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBpbmNsdWRlIGFwcC1ydGwge1xyXG4gICAgZGlyZWN0aW9uOiBydGwgIWltcG9ydGFudDtcclxuICB9XHJcblxyXG4gIC8vIGRhdGVwaWNrZXIgaGVhZGVyIHN0eWxlc1xyXG4gIHRhYmxlIHRoZWFkIHRyOmZpcnN0LWNoaWxkIHtcclxuICAgIGhlaWdodDogNTJweCAhaW1wb3J0YW50O1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIH1cclxuICAuY2FsZW5kYXItdGFibGUgdGQge1xyXG4gICAgYm9yZGVyLXJhZGl1czogNTByZW07XHJcbiAgfVxyXG5cclxuICAvLyBtb250aCBhbmQgeWVhciBzZWxlY3Qgc3R5bGVzXHJcbiAgdGFibGUgdGhlYWQge1xyXG4gICAgdGgsXHJcbiAgICB0ZCB7XHJcbiAgICAgIHNlbGVjdCB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IGxpZ2h0LiRmb250LXdlaWdodC1zZW1pYm9sZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy8gcHJldiBhcnJvdyBzdHlsZXMgZXhjbHVkaW5nIHNpbmdsZSBkYXRlcmFuZ2VwaWNrZXJcclxuLmRhdGVyYW5nZXBpY2tlciB7XHJcbiAgLmRycC1jYWxlbmRhcjpub3QoLnNpbmdsZSkubGVmdCB7XHJcbiAgICAucHJldiB7XHJcbiAgICAgIEBpbmNsdWRlIGFwcC1sdHIge1xyXG4gICAgICAgIGxlZnQ6IDAuMjVyZW07XHJcbiAgICAgIH1cclxuICAgICAgQGluY2x1ZGUgYXBwLXJ0bCB7XHJcbiAgICAgICAgcmlnaHQ6IDAuMjVyZW07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIG5leHQgYXJyb3cgc3R5bGVzIGV4Y2x1ZGluZyBzaW5nbGUgZGF0ZXJhbmdlcGlja2VyXHJcbiAgLmRycC1jYWxlbmRhcjpub3QoLnNpbmdsZSkucmlnaHQge1xyXG4gICAgLm5leHQge1xyXG4gICAgICBAaW5jbHVkZSBhcHAtbHRyIHtcclxuICAgICAgICByaWdodDogMC4yNXJlbTtcclxuICAgICAgfVxyXG4gICAgICBAaW5jbHVkZSBhcHAtcnRsIHtcclxuICAgICAgICBsZWZ0OiAwLjI1cmVtO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4uZGF0ZXJhbmdlcGlja2VyLmF1dG8tYXBwbHkgLmRycC1idXR0b25zIHtcclxuICBkaXNwbGF5OiBub25lO1xyXG59XHJcblxyXG4uZGF0ZXJhbmdlcGlja2VyLnNob3ctY2FsZW5kYXIgLmRycC1jYWxlbmRhcixcclxuLmRhdGVyYW5nZXBpY2tlci5zaG93LWNhbGVuZGFyIC5kcnAtYnV0dG9ucyB7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbn1cclxuXHJcbi5kYXRlcmFuZ2VwaWNrZXIgLmRycC1jYWxlbmRhciB7XHJcbiAgZGlzcGxheTogbm9uZTtcclxuICBwYWRkaW5nOiAkZGF0ZXJhbmdlcGlja2VyLXBhZGRpbmc7XHJcblxyXG4gICYuc2luZ2xlIC5jYWxlbmRhci10YWJsZSB7XHJcbiAgICBib3JkZXI6IDA7XHJcbiAgfVxyXG59XHJcblxyXG4uZGF0ZXJhbmdlcGlja2VyLnNpbmdsZSB7XHJcbiAgLmRycC1zZWxlY3RlZCB7XHJcbiAgICBkaXNwbGF5OiBub25lO1xyXG4gIH1cclxuICAuZGF0ZXJhbmdlcGlja2VyIC5yYW5nZXMsXHJcbiAgLmRycC1jYWxlbmRhciB7XHJcbiAgICBmbG9hdDogbm9uZTtcclxuICB9XHJcbn1cclxuXHJcbi5kYXRlcmFuZ2VwaWNrZXIgLmNhbGVuZGFyLXRhYmxlIHtcclxuICBib3JkZXI6IDA7XHJcblxyXG4gIC8vIHByZXYgJiBuZXh0IGFycm93IGRlZmF1bHQgc3R5bGVzXHJcbiAgLm5leHQsXHJcbiAgLnByZXYge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAwLjY1cmVtO1xyXG4gICAgbWluLXdpZHRoOiB1bnNldDtcclxuICAgIGhlaWdodDogMS43NXJlbTtcclxuICAgIHdpZHRoOiAxLjc1cmVtO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNTByZW07XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIH1cclxuXHJcbiAgLm5leHQgc3BhbixcclxuICAucHJldiBzcGFuIHtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIGJvcmRlci13aWR0aDogMCAxcHggMXB4IDA7XHJcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMDtcclxuICAgIGhlaWdodDogJGRhdGVyYW5nZXBpY2tlci1hcnJvdy1zaXplO1xyXG4gICAgd2lkdGg6ICRkYXRlcmFuZ2VwaWNrZXItYXJyb3ctc2l6ZTtcclxuICB9XHJcblxyXG4gIC5wcmV2IHNwYW4ge1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAtJGRhdGVyYW5nZXBpY2tlci1hcnJvdy1zaXplICogMC41O1xyXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMTM1ZGVnKTtcclxuXHJcbiAgICBAaW5jbHVkZSBhcHAtcnRsIHtcclxuICAgICAgbWFyZ2luLWxlZnQ6IC0kZGF0ZXJhbmdlcGlja2VyLWFycm93LXNpemUgKiAwLjU7XHJcbiAgICAgIG1hcmdpbi1yaWdodDogMDtcclxuICAgICAgdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC5uZXh0IHNwYW4ge1xyXG4gICAgbWFyZ2luLWxlZnQ6IC0kZGF0ZXJhbmdlcGlja2VyLWFycm93LXNpemUgKiAwLjU7XHJcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtNDVkZWcpO1xyXG5cclxuICAgIEBpbmNsdWRlIGFwcC1ydGwge1xyXG4gICAgICBtYXJnaW4tbGVmdDogMDtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiAtJGRhdGVyYW5nZXBpY2tlci1hcnJvdy1zaXplICogMC41O1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxMzVkZWcpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdGFibGUge1xyXG4gICAgYm9yZGVyOiAwO1xyXG4gICAgYm9yZGVyLXNwYWNpbmc6IDA7XHJcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfVxyXG5cclxuICB0aCxcclxuICB0ZCB7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG4gICAgbWluLXdpZHRoOiAkZGF0ZXJhbmdlcGlja2VyLWNlbGwtc2l6ZTtcclxuICAgIGhlaWdodDogJGRhdGVyYW5nZXBpY2tlci1jZWxsLXNpemU7XHJcbiAgICB3aWR0aDogJGRhdGVyYW5nZXBpY2tlci1jZWxsLXNpemU7XHJcbiAgICBsaW5lLWhlaWdodDogY2FsYygjeyRkYXRlcmFuZ2VwaWNrZXItY2VsbC1zaXplfSAtIDJweCk7XHJcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIH1cclxufVxyXG5cclxuLy8gZGF0ZXJhbmdlcGlja2VyIHNpbmdsZVxyXG4uZGF0ZXJhbmdlcGlja2VyIC5zaW5nbGUge1xyXG4gIC8vIGFycm93IGFsaWdubWVudHNcclxuICAubmV4dCB7XHJcbiAgICBmbG9hdDogcmlnaHQ7XHJcbiAgICBAaW5jbHVkZSBhcHAtbHRyIHtcclxuICAgICAgcmlnaHQ6IDAuNjI1cmVtO1xyXG4gICAgfVxyXG4gICAgQGluY2x1ZGUgYXBwLXJ0bCB7XHJcbiAgICAgIGxlZnQ6IDAuNjI1cmVtO1xyXG4gICAgfVxyXG4gIH1cclxuICAucHJldiB7XHJcbiAgICBAaW5jbHVkZSBhcHAtbHRyIHtcclxuICAgICAgcmlnaHQ6IDMuMTI1cmVtO1xyXG4gICAgfVxyXG4gICAgQGluY2x1ZGUgYXBwLXJ0bCB7XHJcbiAgICAgIGxlZnQ6IDMuMTI1cmVtO1xyXG4gICAgfVxyXG4gIH1cclxuICAvLyBtb250aCBhbGlnbm1lbnRzXHJcbiAgdGgubW9udGgge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAwLjVyZW07XHJcbiAgICBAaW5jbHVkZSBhcHAtbHRyIHtcclxuICAgICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgICAgbGVmdDogMC41NjJyZW07XHJcbiAgICB9XHJcbiAgICBAaW5jbHVkZSBhcHAtcnRsIHtcclxuICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbiAgICAgIHJpZ2h0OiAwLjU2MnJlbTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi5kYXRlcmFuZ2VwaWNrZXIgdGQge1xyXG4gIEBpbmNsdWRlIGFwcC1sdHIge1xyXG4gICAgJi5zdGFydC1kYXRlOm5vdCguZW5kLWRhdGUpIHtcclxuICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDAgIWltcG9ydGFudDtcclxuICAgICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAgIWltcG9ydGFudDtcclxuICAgIH1cclxuXHJcbiAgICAmLmVuZC1kYXRlOm5vdCguc3RhcnQtZGF0ZSkge1xyXG4gICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwICFpbXBvcnRhbnQ7XHJcbiAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDAgIWltcG9ydGFudDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gICYuaW4tcmFuZ2U6bm90KC5zdGFydC1kYXRlKTpub3QoLmVuZC1kYXRlKSB7XHJcbiAgICBib3JkZXItcmFkaXVzOiAwICFpbXBvcnRhbnQ7XHJcbiAgfVxyXG5cclxuICBAaW5jbHVkZSBhcHAtcnRsIHtcclxuICAgICYuc3RhcnQtZGF0ZTpub3QoLmVuZC1kYXRlKSB7XHJcbiAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDAgIWltcG9ydGFudDtcclxuICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMCAhaW1wb3J0YW50O1xyXG4gICAgfVxyXG5cclxuICAgICYuZW5kLWRhdGU6bm90KC5zdGFydC1kYXRlKSB7XHJcbiAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwICFpbXBvcnRhbnQ7XHJcbiAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwICFpbXBvcnRhbnQ7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4uZGF0ZXJhbmdlcGlja2VyIHRkLmRpc2FibGVkLFxyXG4uZGF0ZXJhbmdlcGlja2VyIG9wdGlvbi5kaXNhYmxlZCB7XHJcbiAgY3Vyc29yOiBub3QtYWxsb3dlZDtcclxuICB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaDtcclxufVxyXG5cclxuLmRhdGVyYW5nZXBpY2tlciB0aC5tb250aCB7XHJcbiAgd2lkdGg6IGF1dG87XHJcbn1cclxuLmRhdGVyYW5nZXBpY2tlciBzZWxlY3Qge1xyXG4gICYubW9udGhzZWxlY3QsXHJcbiAgJi55ZWFyc2VsZWN0IHtcclxuICAgIGhlaWdodDogYXV0bztcclxuICAgIHBhZGRpbmc6IDFweDtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIGJvcmRlcjogMDtcclxuICAgIGN1cnNvcjogZGVmYXVsdDtcclxuICB9XHJcbiAgJjpmb2N1cy12aXNpYmxlIHtcclxuICAgIG91dGxpbmU6IDA7XHJcbiAgfVxyXG5cclxuICAmLm1vbnRoc2VsZWN0IHtcclxuICAgIHdpZHRoOiA0NiU7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDIlO1xyXG5cclxuICAgIEBpbmNsdWRlIGFwcC1ydGwge1xyXG4gICAgICBtYXJnaW4tbGVmdDogMiU7XHJcbiAgICAgIG1hcmdpbi1yaWdodDogMDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gICYueWVhcnNlbGVjdCB7XHJcbiAgICB3aWR0aDogNDAlO1xyXG4gIH1cclxuXHJcbiAgJi5ob3Vyc2VsZWN0LFxyXG4gICYubWludXRlc2VsZWN0LFxyXG4gICYuc2Vjb25kc2VsZWN0LFxyXG4gICYuYW1wbXNlbGVjdCB7XHJcbiAgICBvdXRsaW5lOiAwO1xyXG4gICAgd2lkdGg6ICRkYXRlcmFuZ2VwaWNrZXItc2VsZWN0LXdpZHRoO1xyXG4gICAgcGFkZGluZzogMnB4O1xyXG4gICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgfVxyXG59XHJcblxyXG4uZGF0ZXJhbmdlcGlja2VyIC5jYWxlbmRhci10aW1lIHtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgbGluZS1oZWlnaHQ6IDMwcHg7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIG1hcmdpbjogMCBhdXRvO1xyXG5cclxuICBzZWxlY3QuZGlzYWJsZWQge1xyXG4gICAgY3Vyc29yOiBub3QtYWxsb3dlZDtcclxuICB9XHJcbn1cclxuXHJcbi5kYXRlcmFuZ2VwaWNrZXIgLmRycC1idXR0b25zIHtcclxuICBwYWRkaW5nOiAkZGF0ZXJhbmdlcGlja2VyLXBhZGRpbmcgKyAwLjNyZW07XHJcbiAgY2xlYXI6IGJvdGg7XHJcbiAgZGlzcGxheTogbm9uZTtcclxuICB0ZXh0LWFsaWduOiByaWdodDtcclxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZDtcclxuXHJcbiAgLmJ0biB7XHJcbiAgICBtYXJnaW4tbGVmdDogJGRhdGVyYW5nZXBpY2tlci1wYWRkaW5nICsgMC40cmVtO1xyXG4gIH1cclxuXHJcbiAgQGluY2x1ZGUgYXBwLXJ0bCB7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG5cclxuICAgIC5idG4ge1xyXG4gICAgICBtYXJnaW4tbGVmdDogMDtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiAkZGF0ZXJhbmdlcGlja2VyLXBhZGRpbmcgKyAwLjRyZW07XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4uZGF0ZXJhbmdlcGlja2VyIC5kcnAtc2VsZWN0ZWQge1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIHBhZGRpbmctYm90dG9tOiAkZGF0ZXJhbmdlcGlja2VyLXBhZGRpbmc7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbn1cclxuXHJcbi5kYXRlcmFuZ2VwaWNrZXIgLnJhbmdlcyB7XHJcbiAgdGV4dC1hbGlnbjogbGVmdDtcclxuICBmbG9hdDogbm9uZTtcclxuICBtYXJnaW46IDA7XHJcblxyXG4gIC8vIERhdGVyYW5nZXBpY2tlciBSYW5nZXMgc3BhY2luZ1xyXG4gIHVsIHtcclxuICAgIHBhZGRpbmc6IDAuODc1cmVtIDA7XHJcbiAgICBtYXJnaW46IDAgYXV0bztcclxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICB9XHJcbiAgbGkge1xyXG4gICAgbWFyZ2luOiAwLjEyNXJlbSAwLjg3NXJlbTtcclxuICAgIHBhZGRpbmc6IDAuMjVyZW0gMXJlbTtcclxuICB9XHJcblxyXG4gIEBpbmNsdWRlIGFwcC1ydGwge1xyXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbiAgfVxyXG59XHJcblxyXG4uZGF0ZXJhbmdlcGlja2VyLnNob3ctY2FsZW5kYXIgLnJhbmdlcyB7XHJcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkO1xyXG5cclxuICAmOmVtcHR5IHtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgfVxyXG59XHJcblxyXG4uZGF0ZXJhbmdlcGlja2VyIC5kcnAtY2FsZW5kYXIucmlnaHQge1xyXG4gIEBpbmNsdWRlIGFwcC1sdHIge1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxcHg7XHJcbiAgfVxyXG4gIEBpbmNsdWRlIGFwcC1ydGwge1xyXG4gICAgcGFkZGluZy1yaWdodDogMXB4O1xyXG4gIH1cclxufVxyXG5cclxuLy8gTGlnaHQgc3R5bGVcclxuQGlmICRlbmFibGUtbGlnaHQtc3R5bGUge1xyXG4gIC5saWdodC1zdHlsZSB7XHJcbiAgICAuZGF0ZXJhbmdlcGlja2VyIHtcclxuICAgICAgbWFyZ2luLXRvcDogbGlnaHQuJGRyb3Bkb3duLXNwYWNlcjtcclxuICAgICAgei1pbmRleDogbGlnaHQuJHppbmRleC1wb3BvdmVyICFpbXBvcnRhbnQ7XHJcbiAgICAgIGJvcmRlcjogbGlnaHQuJGRyb3Bkb3duLWJvcmRlci13aWR0aCBzb2xpZCBsaWdodC4kZHJvcGRvd24tYm9yZGVyLWNvbG9yO1xyXG4gICAgICBib3JkZXItcmFkaXVzOiBsaWdodC4kYm9yZGVyLXJhZGl1cztcclxuICAgICAgd2lkdGg6IGNhbGMoI3skZGF0ZXJhbmdlcGlja2VyLXdpZHRofSArICN7bGlnaHQuJGRyb3Bkb3duLWJvcmRlci13aWR0aCAqIDJ9KTtcclxuICAgICAgYm94LXNoYWRvdzogbGlnaHQuJGRyb3Bkb3duLWJveC1zaGFkb3c7XHJcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0LiRkcm9wZG93bi1iZztcclxuXHJcbiAgICAgIHRhYmxlIHRoZWFkIHtcclxuICAgICAgICBjb2xvcjogbGlnaHQuJGhlYWRpbmdzLWNvbG9yO1xyXG4gICAgICB9XHJcbiAgICAgICYuZHJvcC11cCB7XHJcbiAgICAgICAgbWFyZ2luLXRvcDogLShsaWdodC4kZHJvcGRvd24tc3BhY2VyKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgJi53aXRoLXdlZWstbnVtYmVycyB7XHJcbiAgICAgICAgd2lkdGg6IGNhbGMoI3skZGF0ZXJhbmdlcGlja2VyLXdpZHRoLXdpdGgtd2Vla3N9ICsgI3tsaWdodC4kZHJvcGRvd24tYm9yZGVyLXdpZHRoICogMn0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAuZGF0ZXJhbmdlcGlja2VyIHRkLmFjdGl2ZTpub3QoLm9mZikge1xyXG4gICAgICBib3gtc2hhZG93OiBsaWdodC4kYm94LXNoYWRvdy1zbTtcclxuICAgIH1cclxuXHJcbiAgICAuZGF0ZXJhbmdlcGlja2VyIC5kcnAtc2VsZWN0ZWQge1xyXG4gICAgICBmb250LXNpemU6IGxpZ2h0LiRmb250LXNpemUtc207XHJcbiAgICB9XHJcblxyXG4gICAgLmRhdGVyYW5nZXBpY2tlciAuZHJwLWJ1dHRvbnMge1xyXG4gICAgICBib3JkZXItY29sb3I6IGxpZ2h0LiRib3JkZXItY29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgLmRhdGVyYW5nZXBpY2tlciAuY2FsZW5kYXItdGFibGUgdGhlYWQgdHI6bGFzdC1jaGlsZCB0aCB7XHJcbiAgICAgIGJvcmRlci1yYWRpdXM6IDAgIWltcG9ydGFudDtcclxuICAgICAgZm9udC1zaXplOiBsaWdodC4kc21hbGwtZm9udC1zaXplO1xyXG4gICAgICBmb250LXdlaWdodDogbGlnaHQuJGZvbnQtd2VpZ2h0LXNlbWlib2xkO1xyXG4gICAgfVxyXG5cclxuICAgIC5kYXRlcmFuZ2VwaWNrZXIgdGgubW9udGgge1xyXG4gICAgICBmb250LXdlaWdodDogbGlnaHQuJGZvbnQtd2VpZ2h0LXNlbWlib2xkO1xyXG4gICAgfVxyXG5cclxuICAgIC5kYXRlcmFuZ2VwaWNrZXIgdGQud2VlayxcclxuICAgIC5kYXRlcmFuZ2VwaWNrZXIgdGgud2VlayB7XHJcbiAgICAgIGNvbG9yOiBsaWdodC4kYm9keS1jb2xvcjtcclxuICAgIH1cclxuXHJcbiAgICAuZGF0ZXJhbmdlcGlja2VyIHRkLmRpc2FibGVkLFxyXG4gICAgLmRhdGVyYW5nZXBpY2tlciBvcHRpb24uZGlzYWJsZWQge1xyXG4gICAgICBjb2xvcjogbGlnaHQuJHRleHQtbXV0ZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLmRhdGVyYW5nZXBpY2tlciB0ZC5hdmFpbGFibGU6bm90KC5hY3RpdmUpOmhvdmVyLFxyXG4gICAgLmRhdGVyYW5nZXBpY2tlciB0aC5hdmFpbGFibGU6aG92ZXIge1xyXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodC5yZ2JhLXRvLWhleChyZ2JhKGxpZ2h0LiRibGFjaywgMC4wOCksIGxpZ2h0LiRjYXJkLWJnKTtcclxuICAgIH1cclxuXHJcbiAgICAuZGF0ZXJhbmdlcGlja2VyIHRkLm9mZiB7XHJcbiAgICAgIGNvbG9yOiBsaWdodC4kdGV4dC1tdXRlZDtcclxuICAgIH1cclxuXHJcbiAgICAuZGF0ZXJhbmdlcGlja2VyIC5yYW5nZXMgbGkge1xyXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgIGJvcmRlci1yYWRpdXM6IGxpZ2h0LiRkcm9wZG93bi1ib3JkZXItcmFkaXVzO1xyXG5cclxuICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHQuJGRyb3Bkb3duLWxpbmstaG92ZXItYmc7XHJcbiAgICAgICAgY29sb3I6IGxpZ2h0LiRjb21wb25lbnQtaG92ZXItY29sb3I7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAuZGF0ZXJhbmdlcGlja2VyIC5jYWxlbmRhci10YWJsZSAubmV4dCxcclxuICAgIC5kYXRlcmFuZ2VwaWNrZXIgLmNhbGVuZGFyLXRhYmxlIC5wcmV2IHtcclxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHQucmdiYS10by1oZXgocmdiYShsaWdodC4kYmxhY2ssIDAuMDgpLCBsaWdodC4kY2FyZC1iZyk7XHJcbiAgICAgIHNwYW4ge1xyXG4gICAgICAgIGJvcmRlci1jb2xvcjogbGlnaHQuJGJvZHktY29sb3I7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAuZGF0ZXJhbmdlcGlja2VyIHNlbGVjdCB7XHJcbiAgICAgIGNvbG9yOiBsaWdodC4kaGVhZGluZ3MtY29sb3I7XHJcbiAgICAgICYuaG91cnNlbGVjdCxcclxuICAgICAgJi5taW51dGVzZWxlY3QsXHJcbiAgICAgICYuc2Vjb25kc2VsZWN0LFxyXG4gICAgICAmLmFtcG1zZWxlY3Qge1xyXG4gICAgICAgIGJhY2tncm91bmQ6IGxpZ2h0LiRncmF5LTEwMDtcclxuICAgICAgICBmb250LXNpemU6IGxpZ2h0LiRmb250LXNpemUtc207XHJcbiAgICAgICAgY29sb3I6IGxpZ2h0LiRib2R5LWNvbG9yO1xyXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyAhIEZJWDogT1MgV2luZG93cyBhbmQgTGludXggQnJvd3NlcnMgREQgT3B0aW9uIGNvbG9yXHJcbiAgICAgICYubW9udGhzZWxlY3QsXHJcbiAgICAgICYueWVhcnNlbGVjdCB7XHJcbiAgICAgICAgb3B0aW9uIHtcclxuICAgICAgICAgIGNvbG9yOiBsaWdodC4kYm9keS1jb2xvcjtcclxuICAgICAgICAgIGJhY2tncm91bmQ6IGxpZ2h0LiRpbnB1dC1iZztcclxuICAgICAgICAgICY6ZGlzYWJsZWQge1xyXG4gICAgICAgICAgICBjb2xvcjogbGlnaHQuJHRleHQtbXV0ZWQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLmRhdGVyYW5nZXBpY2tlciAuY2FsZW5kYXItdGltZSBzZWxlY3QuZGlzYWJsZWQge1xyXG4gICAgICBjb2xvcjogbGlnaHQuJHRleHQtbGlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgQGluY2x1ZGUgbGlnaHQubWVkaWEtYnJlYWtwb2ludC11cChtZCkge1xyXG4gICAgICAuZGF0ZXJhbmdlcGlja2VyIHtcclxuICAgICAgICB3aWR0aDogYXV0byAhaW1wb3J0YW50O1xyXG5cclxuICAgICAgICAmOm5vdCguc2luZ2xlKSAuZHJwLXNlbGVjdGVkIHtcclxuICAgICAgICAgIHdpZHRoOiBhdXRvO1xyXG4gICAgICAgICAgcGFkZGluZzogMDtcclxuICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIEBpbmNsdWRlIGFwcC1sdHItc3R5bGUge1xyXG4gICAgICAgIC5kYXRlcmFuZ2VwaWNrZXI6bm90KC5zaW5nbGUpIC5kcnAtY2FsZW5kYXIge1xyXG4gICAgICAgICAgZmxvYXQ6IGxlZnQ7XHJcblxyXG4gICAgICAgICAgJi5sZWZ0IHtcclxuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMDtcclxuICAgICAgICAgICAgYm9yZGVyLXJpZ2h0OiBsaWdodC4kYm9yZGVyLXdpZHRoIHNvbGlkIGxpZ2h0LiRib3JkZXItY29sb3I7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBAaW5jbHVkZSBhcHAtcnRsLXN0eWxlIHtcclxuICAgICAgICAuZGF0ZXJhbmdlcGlja2VyOm5vdCguc2luZ2xlKSAuZHJwLWNhbGVuZGFyIHtcclxuICAgICAgICAgIGZsb2F0OiByaWdodDtcclxuICAgICAgICAgICYubGVmdCB7XHJcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMDtcclxuICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IGxpZ2h0LiRib3JkZXItd2lkdGggc29saWQgbGlnaHQuJGJvcmRlci1jb2xvcjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBAaW5jbHVkZSBsaWdodC5tZWRpYS1icmVha3BvaW50LXVwKGxnKSB7XHJcbiAgICAgIC5kYXRlcmFuZ2VwaWNrZXIgLnJhbmdlcyB7XHJcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMDtcclxuICAgICAgfVxyXG5cclxuICAgICAgQGluY2x1ZGUgYXBwLWx0ci1zdHlsZSB7XHJcbiAgICAgICAgLmRhdGVyYW5nZXBpY2tlciB7XHJcbiAgICAgICAgICAucmFuZ2VzIHtcclxuICAgICAgICAgICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBAaW5jbHVkZSBhcHAtcnRsLXN0eWxlIHtcclxuICAgICAgICAuZGF0ZXJhbmdlcGlja2VyIHtcclxuICAgICAgICAgIC5yYW5nZXMge1xyXG4gICAgICAgICAgICBmbG9hdDogcmlnaHQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyBEYXJrIHN0eWxlXHJcbkBpZiAkZW5hYmxlLWRhcmstc3R5bGUge1xyXG4gIC5kYXJrLXN0eWxlIHtcclxuICAgIC5kYXRlcmFuZ2VwaWNrZXIge1xyXG4gICAgICBib3gtc2hhZG93OiBkYXJrLiRkcm9wZG93bi1ib3gtc2hhZG93O1xyXG4gICAgICB3aWR0aDogY2FsYygjeyRkYXRlcmFuZ2VwaWNrZXItd2lkdGh9ICsgI3tkYXJrLiRkcm9wZG93bi1ib3JkZXItd2lkdGggKiAyfSk7XHJcbiAgICAgIG1hcmdpbi10b3A6IGRhcmsuJGRyb3Bkb3duLXNwYWNlcjtcclxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogZGFyay4kZHJvcGRvd24tYmc7XHJcbiAgICAgIGJvcmRlcjogZGFyay4kZHJvcGRvd24tYm9yZGVyLXdpZHRoIHNvbGlkIGRhcmsuJGRyb3Bkb3duLWJvcmRlci1jb2xvcjtcclxuICAgICAgYm9yZGVyLXJhZGl1czogZGFyay4kYm9yZGVyLXJhZGl1cztcclxuICAgICAgei1pbmRleDogZGFyay4kemluZGV4LXBvcG92ZXIgIWltcG9ydGFudDtcclxuXHJcbiAgICAgIHRhYmxlIHRoZWFkIHtcclxuICAgICAgICBjb2xvcjogZGFyay4kaGVhZGluZ3MtY29sb3I7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICYud2l0aC13ZWVrLW51bWJlcnMge1xyXG4gICAgICAgIHdpZHRoOiBjYWxjKCN7JGRhdGVyYW5nZXBpY2tlci13aWR0aC13aXRoLXdlZWtzfSArICN7ZGFyay4kZHJvcGRvd24tYm9yZGVyLXdpZHRoICogMn0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAmLmRyb3AtdXAge1xyXG4gICAgICAgIG1hcmdpbi10b3A6IC0oZGFyay4kZHJvcGRvd24tc3BhY2VyKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLmRhdGVyYW5nZXBpY2tlciB0ZC5hY3RpdmU6bm90KC5vZmYpIHtcclxuICAgICAgYm94LXNoYWRvdzogZGFyay4kYm94LXNoYWRvdy1zbTtcclxuICAgIH1cclxuXHJcbiAgICAuZGF0ZXJhbmdlcGlja2VyIC5kcnAtc2VsZWN0ZWQge1xyXG4gICAgICBmb250LXNpemU6IGRhcmsuJGZvbnQtc2l6ZS1zbTtcclxuICAgIH1cclxuXHJcbiAgICAuZGF0ZXJhbmdlcGlja2VyIC5kcnAtYnV0dG9ucyxcclxuICAgIC5kYXRlcmFuZ2VwaWNrZXIgLnJhbmdlcyB7XHJcbiAgICAgIGJvcmRlci1jb2xvcjogZGFyay4kYm9yZGVyLWNvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIC5kYXRlcmFuZ2VwaWNrZXIgLmNhbGVuZGFyLXRhYmxlIHRoZWFkIHRyOmxhc3QtY2hpbGQgdGgge1xyXG4gICAgICBib3JkZXItcmFkaXVzOiAwICFpbXBvcnRhbnQ7XHJcbiAgICAgIGZvbnQtc2l6ZTogZGFyay4kc21hbGwtZm9udC1zaXplO1xyXG4gICAgICBmb250LXdlaWdodDogZGFyay4kZm9udC13ZWlnaHQtc2VtaWJvbGQ7XHJcbiAgICB9XHJcblxyXG4gICAgLmRhdGVyYW5nZXBpY2tlciB0aC5tb250aCB7XHJcbiAgICAgIGZvbnQtd2VpZ2h0OiBkYXJrLiRmb250LXdlaWdodC1zZW1pYm9sZDtcclxuICAgIH1cclxuXHJcbiAgICAuZGF0ZXJhbmdlcGlja2VyIHRkLndlZWssXHJcbiAgICAuZGF0ZXJhbmdlcGlja2VyIHRoLndlZWsge1xyXG4gICAgICBjb2xvcjogZGFyay4kYm9keS1jb2xvcjtcclxuICAgIH1cclxuXHJcbiAgICAuZGF0ZXJhbmdlcGlja2VyIHRkLmRpc2FibGVkLFxyXG4gICAgLmRhdGVyYW5nZXBpY2tlciBvcHRpb24uZGlzYWJsZWQge1xyXG4gICAgICBjb2xvcjogZGFyay4kdGV4dC1tdXRlZDtcclxuICAgIH1cclxuXHJcbiAgICAuZGF0ZXJhbmdlcGlja2VyIHRkLmF2YWlsYWJsZTpub3QoLmFjdGl2ZSk6aG92ZXIsXHJcbiAgICAuZGF0ZXJhbmdlcGlja2VyIHRoLmF2YWlsYWJsZTpob3ZlciB7XHJcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmsucmdiYS10by1oZXgocmdiYShkYXJrLiRiYXNlLCAwLjA4KSwgZGFyay4kY2FyZC1iZyk7XHJcbiAgICB9XHJcblxyXG4gICAgLmRhdGVyYW5nZXBpY2tlciB0ZC5vZmYge1xyXG4gICAgICBjb2xvcjogZGFyay4kdGV4dC1tdXRlZDtcclxuICAgIH1cclxuXHJcbiAgICAuZGF0ZXJhbmdlcGlja2VyIC5yYW5nZXMgbGkge1xyXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgIGJvcmRlci1yYWRpdXM6IGRhcmsuJGRyb3Bkb3duLWJvcmRlci1yYWRpdXM7XHJcblxyXG4gICAgICAmOmhvdmVyIHtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrLiRkcm9wZG93bi1saW5rLWhvdmVyLWJnO1xyXG4gICAgICAgIGNvbG9yOiBkYXJrLiRjb21wb25lbnQtaG92ZXItY29sb3I7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAuZGF0ZXJhbmdlcGlja2VyIC5jYWxlbmRhci10YWJsZSAubmV4dCxcclxuICAgIC5kYXRlcmFuZ2VwaWNrZXIgLmNhbGVuZGFyLXRhYmxlIC5wcmV2IHtcclxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogZGFyay5yZ2JhLXRvLWhleChyZ2JhKGRhcmsuJGJhc2UsIDAuMDgpLCBkYXJrLiRjYXJkLWJnKTtcclxuICAgICAgc3BhbiB7XHJcbiAgICAgICAgYm9yZGVyLWNvbG9yOiBkYXJrLiRib2R5LWNvbG9yO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLmRhdGVyYW5nZXBpY2tlciBzZWxlY3Qge1xyXG4gICAgICBjb2xvcjogZGFyay4kaGVhZGluZ3MtY29sb3I7XHJcbiAgICAgICYuaG91cnNlbGVjdCxcclxuICAgICAgJi5taW51dGVzZWxlY3QsXHJcbiAgICAgICYuc2Vjb25kc2VsZWN0LFxyXG4gICAgICAmLmFtcG1zZWxlY3Qge1xyXG4gICAgICAgIGJhY2tncm91bmQ6IGRhcmsuJGdyYXktMTAwO1xyXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xyXG4gICAgICAgIGZvbnQtc2l6ZTogZGFyay4kZm9udC1zaXplLXNtO1xyXG4gICAgICAgIGNvbG9yOiBkYXJrLiRib2R5LWNvbG9yO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyAhIEZJWDogT1MgV2luZG93cyBhbmQgTGludXggQnJvd3NlcnMgREQgT3B0aW9uIGNvbG9yXHJcbiAgICAgICYubW9udGhzZWxlY3QsXHJcbiAgICAgICYueWVhcnNlbGVjdCB7XHJcbiAgICAgICAgb3B0aW9uIHtcclxuICAgICAgICAgIGNvbG9yOiBkYXJrLiRib2R5LWNvbG9yO1xyXG4gICAgICAgICAgYmFja2dyb3VuZDogZGFyay4kaW5wdXQtYmc7XHJcbiAgICAgICAgICAmOmRpc2FibGVkIHtcclxuICAgICAgICAgICAgY29sb3I6IGRhcmsuJHRleHQtbXV0ZWQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLmRhdGVyYW5nZXBpY2tlciAuY2FsZW5kYXItdGltZSBzZWxlY3QuZGlzYWJsZWQge1xyXG4gICAgICBjb2xvcjogZGFyay4kdGV4dC1saWdodDtcclxuICAgIH1cclxuXHJcbiAgICBAaW5jbHVkZSBkYXJrLm1lZGlhLWJyZWFrcG9pbnQtdXAobWQpIHtcclxuICAgICAgLmRhdGVyYW5nZXBpY2tlciB7XHJcbiAgICAgICAgd2lkdGg6IGF1dG8gIWltcG9ydGFudDtcclxuXHJcbiAgICAgICAgJjpub3QoLnNpbmdsZSkgLmRycC1zZWxlY3RlZCB7XHJcbiAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgICB3aWR0aDogYXV0bztcclxuICAgICAgICAgIHBhZGRpbmc6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBAaW5jbHVkZSBhcHAtbHRyLXN0eWxlIHtcclxuICAgICAgICAuZGF0ZXJhbmdlcGlja2VyOm5vdCguc2luZ2xlKSAuZHJwLWNhbGVuZGFyIHtcclxuICAgICAgICAgIGZsb2F0OiBsZWZ0O1xyXG5cclxuICAgICAgICAgICYubGVmdCB7XHJcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDA7XHJcbiAgICAgICAgICAgIGJvcmRlci1yaWdodDogZGFyay4kYm9yZGVyLXdpZHRoIHNvbGlkIGRhcmsuJGJvcmRlci1jb2xvcjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIEBpbmNsdWRlIGFwcC1ydGwtc3R5bGUge1xyXG4gICAgICAgIC5kYXRlcmFuZ2VwaWNrZXI6bm90KC5zaW5nbGUpIC5kcnAtY2FsZW5kYXIge1xyXG4gICAgICAgICAgZmxvYXQ6IHJpZ2h0O1xyXG5cclxuICAgICAgICAgICYubGVmdCB7XHJcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMDtcclxuICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IGRhcmsuJGJvcmRlci13aWR0aCBzb2xpZCBkYXJrLiRib3JkZXItY29sb3I7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQGluY2x1ZGUgZGFyay5tZWRpYS1icmVha3BvaW50LXVwKGxnKSB7XHJcbiAgICAgIC5kYXRlcmFuZ2VwaWNrZXIgLnJhbmdlcyB7XHJcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMDtcclxuICAgICAgfVxyXG5cclxuICAgICAgQGluY2x1ZGUgYXBwLWx0ci1zdHlsZSB7XHJcbiAgICAgICAgLmRhdGVyYW5nZXBpY2tlciB7XHJcbiAgICAgICAgICAucmFuZ2VzIHtcclxuICAgICAgICAgICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBAaW5jbHVkZSBhcHAtcnRsLXN0eWxlIHtcclxuICAgICAgICAuZGF0ZXJhbmdlcGlja2VyIHtcclxuICAgICAgICAgIC5yYW5nZXMge1xyXG4gICAgICAgICAgICBmbG9hdDogcmlnaHQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIiRlbmFibGUtbGlnaHQtc3R5bGU6IHRydWU7XHJcbiRlbmFibGUtZGFyay1zdHlsZTogdHJ1ZTtcclxuJGVuYWJsZS1ydGwtc3VwcG9ydDogdHJ1ZTtcclxuXHJcbkBtaXhpbiBhcHAtbHRyKCRoYXMtY2hpbGQ6IHRydWUpIHtcclxuICBAaWYgJGVuYWJsZS1ydGwtc3VwcG9ydCB7XHJcbiAgICBAaWYgJGhhcy1jaGlsZCB7XHJcbiAgICAgIGh0bWw6bm90KFtkaXI9J3J0bCddKSAmIHtcclxuICAgICAgICBAY29udGVudDtcclxuICAgICAgfVxyXG4gICAgfSBAZWxzZSB7XHJcbiAgICAgIGh0bWw6bm90KFtkaXI9J3J0bCddKSB7XHJcbiAgICAgICAgQGNvbnRlbnQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9IEBlbHNlIHtcclxuICAgIEBjb250ZW50O1xyXG4gIH1cclxufVxyXG5cclxuQG1peGluIGFwcC1sdHItc3R5bGUoKSB7XHJcbiAgQGlmICRlbmFibGUtcnRsLXN1cHBvcnQge1xyXG4gICAgJjpub3QoW2Rpcj0ncnRsJ10pIHtcclxuICAgICAgQGNvbnRlbnQ7XHJcbiAgICB9XHJcbiAgfSBAZWxzZSB7XHJcbiAgICBAY29udGVudDtcclxuICB9XHJcbn1cclxuXHJcbkBtaXhpbiBhcHAtcnRsKCRoYXMtY2hpbGQ6IHRydWUpIHtcclxuICBAaWYgJGVuYWJsZS1ydGwtc3VwcG9ydCB7XHJcbiAgICBAaWYgJGhhcy1jaGlsZCB7XHJcbiAgICAgIFtkaXI9J3J0bCddICYge1xyXG4gICAgICAgIEBjb250ZW50O1xyXG4gICAgICB9XHJcbiAgICB9IEBlbHNlIHtcclxuICAgICAgW2Rpcj0ncnRsJ10ge1xyXG4gICAgICAgIEBjb250ZW50O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5AbWl4aW4gYXBwLXJ0bC1zdHlsZSgpIHtcclxuICBAaWYgJGVuYWJsZS1ydGwtc3VwcG9ydCB7XHJcbiAgICAmW2Rpcj0ncnRsJ10ge1xyXG4gICAgICBAY29udGVudDtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiLy8gVmFyaWFibGVzXHJcbi8vXHJcbi8vIFZhcmlhYmxlcyBzaG91bGQgZm9sbG93IHRoZSBgJGNvbXBvbmVudC1zdGF0ZS1wcm9wZXJ0eS1zaXplYCBmb3JtdWxhIGZvclxyXG4vLyBjb25zaXN0ZW50IG5hbWluZy4gRXg6ICRuYXYtbGluay1kaXNhYmxlZC1jb2xvciBhbmQgJG1vZGFsLWNvbnRlbnQtYm94LXNoYWRvdy14cy5cclxuLy9cclxuLy8gKEMpIEN1c3RvbSB2YXJpYWJsZXMgZm9yIGV4dGVuZGVkIGNvbXBvbmVudHMgb2YgYm9vdHN0cmFwIG9ubHlcclxuXHJcbi8vICogQ29sb3Igc3lzdGVtXHJcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbi8vIHNjc3MtZG9jcy1zdGFydCBncmF5LWNvbG9yLXZhcmlhYmxlc1xyXG4kd2hpdGU6ICNmZmYgIWRlZmF1bHQ7XHJcbiRibGFjazogIzRiNDY1YyAhZGVmYXVsdDtcclxuJGdyYXktMjU6IHJnYmEoJGJsYWNrLCAwLjAxNSkgIWRlZmF1bHQ7IC8vIChDKVxyXG4kZ3JheS01MDogcmdiYSgkYmxhY2ssIDAuMDMpICFkZWZhdWx0OyAvLyAoQylcclxuJGdyYXktMTAwOiByZ2JhKCRibGFjaywgMC4wNSkgIWRlZmF1bHQ7XHJcbiRncmF5LTIwMDogcmdiYSgkYmxhY2ssIDAuMikgIWRlZmF1bHQ7XHJcbiRncmF5LTMwMDogcmdiYSgkYmxhY2ssIDAuMykgIWRlZmF1bHQ7XHJcbiRncmF5LTQwMDogcmdiYSgkYmxhY2ssIDAuNCkgIWRlZmF1bHQ7XHJcbiRncmF5LTUwMDogcmdiYSgkYmxhY2ssIDAuNSkgIWRlZmF1bHQ7XHJcbiRncmF5LTYwMDogcmdiYSgkYmxhY2ssIDAuNikgIWRlZmF1bHQ7XHJcbiRncmF5LTcwMDogcmdiYSgkYmxhY2ssIDAuNykgIWRlZmF1bHQ7XHJcbiRncmF5LTgwMDogcmdiYSgkYmxhY2ssIDAuOCkgIWRlZmF1bHQ7XHJcbiRncmF5LTkwMDogcmdiYSgkYmxhY2ssIDAuOSkgIWRlZmF1bHQ7XHJcbi8vIHNjc3MtZG9jcy1lbmQgZ3JheS1jb2xvci12YXJpYWJsZXNcclxuXHJcbi8vIHNjc3MtZG9jcy1zdGFydCBncmF5LWNvbG9ycy1tYXBcclxuJGdyYXlzOiAoXHJcbiAgJzI1JzogJGdyYXktMjUsXHJcbiAgJzUwJzogJGdyYXktNTBcclxuKSAhZGVmYXVsdDtcclxuLy8gc2Nzcy1kb2NzLWVuZCBncmF5LWNvbG9ycy1tYXBcclxuXHJcbi8vIHNjc3MtZG9jcy1zdGFydCBjb2xvci12YXJpYWJsZXNcclxuJGJsdWU6ICMwMDdiZmYgIWRlZmF1bHQ7XHJcbiRpbmRpZ286ICM2NjEwZjIgIWRlZmF1bHQ7XHJcbiRwdXJwbGU6ICM3MzY3ZjAgIWRlZmF1bHQ7XHJcbiRwaW5rOiAjZTgzZThjICFkZWZhdWx0O1xyXG4kcmVkOiAjZWE1NDU1ICFkZWZhdWx0O1xyXG4kb3JhbmdlOiAjZmQ3ZTE0ICFkZWZhdWx0O1xyXG4keWVsbG93OiAjZmY5ZjQzICFkZWZhdWx0O1xyXG4kZ3JlZW46ICMyOGM3NmYgIWRlZmF1bHQ7XHJcbiR0ZWFsOiAjMjBjOTk3ICFkZWZhdWx0O1xyXG4kY3lhbjogIzAwY2ZlOCAhZGVmYXVsdDtcclxuLy8gc2Nzcy1kb2NzLWVuZCBjb2xvci12YXJpYWJsZXNcclxuXHJcbi8vIHNjc3MtZG9jcy1zdGFydCB0aGVtZS1jb2xvci12YXJpYWJsZXNcclxuJHByaW1hcnk6ICRwdXJwbGUgIWRlZmF1bHQ7XHJcbiRzZWNvbmRhcnk6ICNhOGFhYWUgIWRlZmF1bHQ7XHJcbiRzdWNjZXNzOiAkZ3JlZW4gIWRlZmF1bHQ7XHJcbiRpbmZvOiAkY3lhbiAhZGVmYXVsdDtcclxuJHdhcm5pbmc6ICR5ZWxsb3cgIWRlZmF1bHQ7XHJcbiRkYW5nZXI6ICRyZWQgIWRlZmF1bHQ7XHJcbiRsaWdodDogI2RmZGZlMyAhZGVmYXVsdDtcclxuJGRhcms6ICM0YjRiNGIgIWRlZmF1bHQ7XHJcbiRncmF5OiAkZ3JheS0xMDAgIWRlZmF1bHQ7IC8vIChDKVxyXG4vLyBzY3NzLWRvY3MtZW5kIHRoZW1lLWNvbG9yLXZhcmlhYmxlc1xyXG5cclxuLy8gc2Nzcy1kb2NzLXN0YXJ0IHRoZW1lLWNvbG9ycy1tYXBcclxuJHRoZW1lLWNvbG9yczogKFxyXG4gICdwcmltYXJ5JzogJHByaW1hcnksXHJcbiAgJ3NlY29uZGFyeSc6ICRzZWNvbmRhcnksXHJcbiAgJ3N1Y2Nlc3MnOiAkc3VjY2VzcyxcclxuICAnaW5mbyc6ICRpbmZvLFxyXG4gICd3YXJuaW5nJzogJHdhcm5pbmcsXHJcbiAgJ2Rhbmdlcic6ICRkYW5nZXIsXHJcbiAgJ2xpZ2h0JzogJGxpZ2h0LFxyXG4gICdkYXJrJzogJGRhcmssXHJcbiAgJ2dyYXknOiAkZ3JheVxyXG4pICFkZWZhdWx0O1xyXG4vLyBzY3NzLWRvY3MtZW5kIHRoZW1lLWNvbG9ycy1tYXBcclxuXHJcbiRjb2xvci1zY2hlbWU6ICdsaWdodCcgIWRlZmF1bHQ7IC8vIChDKVxyXG4vLyBUaGUgY29udHJhc3QgcmF0aW8gdG8gcmVhY2ggYWdhaW5zdCB3aGl0ZSwgdG8gZGV0ZXJtaW5lIGlmIGNvbG9yIGNoYW5nZXMgZnJvbSBcImxpZ2h0XCIgdG8gXCJkYXJrXCIuIEFjY2VwdGFibGUgdmFsdWVzIGZvciBXQ0FHIDIuMCBhcmUgMywgNC41IGFuZCA3LlxyXG4vLyBTZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC8jdmlzdWFsLWF1ZGlvLWNvbnRyYXN0LWNvbnRyYXN0XHJcbiRtaW4tY29udHJhc3QtcmF0aW86IDEuNyAhZGVmYXVsdDtcclxuXHJcbi8vICogT3B0aW9uc1xyXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG4kZW5hYmxlLW5lZ2F0aXZlLW1hcmdpbnM6IHRydWUgIWRlZmF1bHQ7XHJcbiRlbmFibGUtdmFsaWRhdGlvbi1pY29uczogZmFsc2UgIWRlZmF1bHQ7XHJcblxyXG4vLyBQcmVmaXggZm9yIDpyb290IENTUyB2YXJpYWJsZXNcclxuJHZhcmlhYmxlLXByZWZpeDogYnMtICFkZWZhdWx0O1xyXG5cclxuLy8gKiBTcGFjaW5nXHJcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbiRzcGFjZXI6IDFyZW0gIWRlZmF1bHQ7XHJcblxyXG4kc2l6ZXMtcHg6IChcclxuICBweC0xNDogMTRweCxcclxuICBweC0xODogMThweCxcclxuICBweC0yMDogMjBweCxcclxuICBweC0zMDogMzBweCxcclxuICBweC00MDogNDBweCxcclxuICBweC01MDogNTBweCxcclxuICBweC03NTogNzVweCxcclxuICBweC0xMDA6IDEwMHB4LFxyXG4gIHB4LTE1MDogMTUwcHgsXHJcbiAgcHgtMjAwOiAyMDBweCxcclxuICBweC0yNTA6IDI1MHB4LFxyXG4gIHB4LTMwMDogMzAwcHgsXHJcbiAgcHgtMzUwOiAzNTBweCxcclxuICBweC00MDA6IDQwMHB4LFxyXG4gIHB4LTUwMDogNTAwcHgsXHJcbiAgcHgtNjAwOiA2MDBweCxcclxuICBweC03MDA6IDcwMHB4LFxyXG4gIHB4LTgwMDogODAwcHgsXHJcbiAgYXV0bzogYXV0b1xyXG4pICFkZWZhdWx0OyAvLyAoQylcclxuXHJcbi8vICogQm9keVxyXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG4kYm9keS1iZzogI2Y4ZjdmYSAhZGVmYXVsdDtcclxuJHJnYmEtdG8taGV4LWJnOiAjZmZmICFkZWZhdWx0OyAvLyAoQylcclxuJGJvZHktY29sb3I6IHJnYmEtdG8taGV4KCRncmF5LTgwMCwgJHJnYmEtdG8taGV4LWJnKSAhZGVmYXVsdDtcclxuJHJnYmEtdG8taGV4LWJnLWludmVydGVkOiAjMDAwICFkZWZhdWx0OyAvLyAoQylcclxuXHJcbi8vICogTGlua3NcclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuJGxpbmstY29sb3I6ICRwcmltYXJ5ICFkZWZhdWx0O1xyXG4kbGluay1kZWNvcmF0aW9uOiBub25lICFkZWZhdWx0O1xyXG4kbGluay1zaGFkZS1wZXJjZW50YWdlOiAxMCUgIWRlZmF1bHQ7XHJcbiRsaW5rLWhvdmVyLWNvbG9yOiBzaGlmdC1jb2xvcigkbGluay1jb2xvciwgJGxpbmstc2hhZGUtcGVyY2VudGFnZSkgIWRlZmF1bHQ7XHJcbiRsaW5rLWhvdmVyLWRlY29yYXRpb246IG51bGwgIWRlZmF1bHQ7XHJcblxyXG4vLyAqIEdyaWRcclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuLy8gR3JpZCBjb250YWluZXJzXHJcblxyXG4vLyBzY3NzLWRvY3Mtc3RhcnQgY29udGFpbmVyLW1heC13aWR0aHNcclxuJGNvbnRhaW5lci1tYXgtd2lkdGhzOiAoXHJcbiAgc206IDU0MHB4LFxyXG4gIG1kOiA3MjBweCxcclxuICBsZzogOTYwcHgsXHJcbiAgeGw6IDExNDBweCxcclxuICB4eGw6IDE0NDBweCAvLyBDdXN0b20geHhsIHNpemVcclxuKSAhZGVmYXVsdDtcclxuLy8gc2Nzcy1kb2NzLWVuZCBjb250YWluZXItbWF4LXdpZHRoc1xyXG5cclxuJGdyaWQtZ3V0dGVyLXdpZHRoOiAxLjVyZW0gIWRlZmF1bHQ7XHJcbiRjb250YWluZXItcGFkZGluZy14OiAxLjVyZW0gIWRlZmF1bHQ7IC8vIChDKVxyXG4kY29udGFpbmVyLXBhZGRpbmcteC1zbTogMXJlbSAhZGVmYXVsdDsgLy8gKEMpXHJcbiRjb250YWluZXItcGFkZGluZy15OiAxLjVyZW0gIWRlZmF1bHQ7IC8vIChDKVxyXG5cclxuLy8gKiBDb21wb25lbnRzXHJcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbi8vIHNjc3MtZG9jcy1zdGFydCBib3JkZXItdmFyaWFibGVzXHJcbiRib3JkZXItd2lkdGg6IDFweCAhZGVmYXVsdDtcclxuJGJvcmRlci1jb2xvcjogcmdiYS10by1oZXgoJGdyYXktMjAwLCAkcmdiYS10by1oZXgtYmcpICFkZWZhdWx0O1xyXG4kYm9yZGVyLWlubmVyLWNvbG9yOiByZ2JhKCRibGFjaywgMC4wNzUpICFkZWZhdWx0OyAvLyAoQylcclxuLy8gc2Nzcy1kb2NzLWVuZCBib3JkZXItdmFyaWFibGVzXHJcblxyXG4vLyBzY3NzLWRvY3Mtc3RhcnQgYm9yZGVyLXJhZGl1cy12YXJpYWJsZXNcclxuJGJvcmRlci1yYWRpdXM6IDAuMzc1cmVtICFkZWZhdWx0O1xyXG4kYm9yZGVyLXJhZGl1cy14bDogMC42MjVyZW0gIWRlZmF1bHQ7IC8vIChDKVxyXG4kYm9yZGVyLXJhZGl1cy1sZzogMC41cmVtICFkZWZhdWx0O1xyXG4kYm9yZGVyLXJhZGl1cy1zbTogMC4yNXJlbSAhZGVmYXVsdDtcclxuJGJvcmRlci1yYWRpdXMteHM6IDAuMTI1cmVtICFkZWZhdWx0OyAvLyAoQylcclxuLy8gc2Nzcy1kb2NzLWVuZCBib3JkZXItcmFkaXVzLXZhcmlhYmxlc1xyXG5cclxuLy8gc2Nzcy1kb2NzLXN0YXJ0IGJveC1zaGFkb3ctdmFyaWFibGVzXHJcbiRib3gtc2hhZG93OiAwIDAuMjVyZW0gMXJlbSByZ2JhKHJnYmEtdG8taGV4KCRncmF5LTUwMCwgJHJnYmEtdG8taGV4LWJnKSwgMC40NSkgIWRlZmF1bHQ7XHJcbiRib3gtc2hhZG93LXNtOiAwIDAuMTI1cmVtIDAuMjVyZW0gcmdiYShyZ2JhLXRvLWhleCgkZ3JheS01MDAsICRyZ2JhLXRvLWhleC1iZyksIDAuMykgIWRlZmF1bHQ7XHJcbiRib3gtc2hhZG93LWxnOiAwIDAuNjI1cmVtIDEuMjVyZW0gcmdiYShyZ2JhLXRvLWhleCgkZ3JheS01MDAsICRyZ2JhLXRvLWhleC1iZyksIDAuNCkgIWRlZmF1bHQ7XHJcbi8vIHNjc3MtZG9jcy1lbmQgYm94LXNoYWRvdy12YXJpYWJsZXNcclxuXHJcbiRjb21wb25lbnQtYWN0aXZlLWNvbG9yOiAkd2hpdGUgIWRlZmF1bHQ7XHJcbiRjb21wb25lbnQtYWN0aXZlLWJnOiAkcHJpbWFyeSAhZGVmYXVsdDtcclxuXHJcbiRjb21wb25lbnQtaG92ZXItY29sb3I6ICRwcmltYXJ5ICFkZWZhdWx0OyAvLyAoQylcclxuJGNvbXBvbmVudC1ob3Zlci1iZzogcmdiYSgkcHJpbWFyeSwgMC4wOCkgIWRlZmF1bHQ7IC8vIChDKVxyXG5cclxuJGNvbXBvbmVudC1saW5lLWhlaWdodDogMS41NCAhZGVmYXVsdDsgLy8gKEMpXHJcbiRjb21wb25lbnQtZm9jdXMtc2hhZG93LXdpZHRoOiAycHggIWRlZmF1bHQ7IC8vIChDKVxyXG5cclxuJGZsb2F0aW5nLWNvbXBvbmVudC1ib3JkZXItY29sb3I6IHJnYmEoJGJsYWNrLCAwLjA1KSAhZGVmYXVsdDsgLy8gKEMpXHJcbiRmbG9hdGluZy1jb21wb25lbnQtc2hhZG93OiAwIDAuMzFyZW0gMS4yNXJlbSAwICRncmF5LTQwMCAhZGVmYXVsdDsgLy8gKEMpIHVzZWQgZm9yIG1vZGFsIGFuZCByYW5nZVxyXG5cclxuJGhyLWNvbG9yOiAkYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xyXG4kaHItb3BhY2l0eTogMSAhZGVmYXVsdDtcclxuJGJvcmRlcmVkLXJvdy1ib3JkZXItY29sb3I6ICRoci1jb2xvciAhZGVmYXVsdDsgLy8gKEMpXHJcblxyXG4vLyBzY3NzLWRvY3Mtc3RhcnQgY2FyZXQtdmFyaWFibGVzXHJcbiRjYXJldC13aWR0aDogMC40MmVtICFkZWZhdWx0O1xyXG4kY2FyZXQtdmVydGljYWwtYWxpZ246IG1pZGRsZSAhZGVmYXVsdDtcclxuJGNhcmV0LXNwYWNpbmc6IDAuNWVtICFkZWZhdWx0O1xyXG4vLyBzY3NzLWRvY3MtZW5kIGNhcmV0LXZhcmlhYmxlc1xyXG5cclxuLy8gKiBUeXBvZ3JhcGh5XHJcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbi8vIHNjc3MtZG9jcy1zdGFydCBmb250LXZhcmlhYmxlc1xyXG4kZm9udC1mYW1pbHktc2Fucy1zZXJpZjogJ1B1YmxpYyBTYW5zJywgLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCAnU2Vnb2UgVUknLCAnT3h5Z2VuJywgJ1VidW50dScsICdDYW50YXJlbGwnLFxyXG4gICdGaXJhIFNhbnMnLCAnRHJvaWQgU2FucycsICdIZWx2ZXRpY2EgTmV1ZScsIHNhbnMtc2VyaWYgIWRlZmF1bHQ7XHJcbiRmb250LWZhbWlseS1zZXJpZjogR2VvcmdpYSwgJ1RpbWVzIE5ldyBSb21hbicsIHNlcmlmICFkZWZhdWx0OyAvLyAoQylcclxuJGZvbnQtZmFtaWx5LW1vbm9zcGFjZTogJ1NGTW9uby1SZWd1bGFyJywgTWVubG8sIE1vbmFjbywgQ29uc29sYXMsICdMaWJlcmF0aW9uIE1vbm8nLCAnQ291cmllciBOZXcnLCBtb25vc3BhY2UgIWRlZmF1bHQ7XHJcbi8vIHN0eWxlbGludC1lbmFibGUgdmFsdWUta2V5d29yZC1jYXNlXHJcbiRmb250LWZhbWlseS1iYXNlOiB2YXIoLS0jeyR2YXJpYWJsZS1wcmVmaXh9Zm9udC1zYW5zLXNlcmlmKSAhZGVmYXVsdDtcclxuJGZvbnQtZmFtaWx5LWNvZGU6IHZhcigtLSN7JHZhcmlhYmxlLXByZWZpeH1mb250LW1vbm9zcGFjZSkgIWRlZmF1bHQ7XHJcblxyXG4vLyAkZm9udC1zaXplLXJvb3QgZWZmZWN0cyB0aGUgdmFsdWUgb2YgYHJlbWAsIHdoaWNoIGlzIHVzZWQgZm9yIGFzIHdlbGwgZm9udCBzaXplcywgcGFkZGluZ3MgYW5kIG1hcmdpbnNcclxuLy8gJGZvbnQtc2l6ZS1iYXNlIGVmZmVjdHMgdGhlIGZvbnQgc2l6ZSBvZiB0aGUgYm9keSB0ZXh0XHJcbiRmb250LXNpemUtcm9vdDogMTZweCAhZGVmYXVsdDtcclxuJGZvbnQtc2l6ZS1iYXNlOiAwLjkzNzVyZW0gIWRlZmF1bHQ7IC8vIEFzc3VtZXMgdGhlIGJyb3dzZXIgZGVmYXVsdCwgdHlwaWNhbGx5IGAxNnB4YFxyXG4kZm9udC1zaXplLXhsOiAxLjI1cmVtICFkZWZhdWx0OyAvLyAoQylcclxuJGZvbnQtc2l6ZS1sZzogMXJlbSAhZGVmYXVsdDtcclxuJGZvbnQtc2l6ZS1zbTogMC43NXJlbSAhZGVmYXVsdDtcclxuJGZvbnQtc2l6ZS14czogMC42OXJlbSAhZGVmYXVsdDsgLy8gKEMpXHJcblxyXG4kZm9udC13ZWlnaHQtc2VtaWJvbGQ6IDYwMCAhZGVmYXVsdDsgLy8gKEMpXHJcbiRmb250LXdlaWdodC1ub3JtYWw6IDQwMCAhZGVmYXVsdDtcclxuJGZvbnQtd2VpZ2h0LWJvbGRlcjogNzAwICFkZWZhdWx0O1xyXG4kZm9udC13ZWlnaHQtbGlnaHRlcjogMzAwICFkZWZhdWx0O1xyXG5cclxuJGxpbmUtaGVpZ2h0LWJhc2U6IDEuNDcgIWRlZmF1bHQ7XHJcbiRsaW5lLWhlaWdodC14bDogMS41ICFkZWZhdWx0OyAvLyAoQylcclxuJGxpbmUtaGVpZ2h0LWxnOiAxLjM3NSAhZGVmYXVsdDtcclxuJGxpbmUtaGVpZ2h0LXNtOiAxICFkZWZhdWx0O1xyXG4kbGluZS1oZWlnaHQteHM6IDAuNzUgIWRlZmF1bHQ7IC8vIChDKVxyXG5cclxuJGgxLWZvbnQtc2l6ZTogMi4zNzVyZW0gIWRlZmF1bHQ7XHJcbiRoMi1mb250LXNpemU6IDJyZW0gIWRlZmF1bHQ7XHJcbiRoMy1mb250LXNpemU6IDEuNjI1cmVtICFkZWZhdWx0O1xyXG4kaDQtZm9udC1zaXplOiAxLjM3NXJlbSAhZGVmYXVsdDtcclxuJGg1LWZvbnQtc2l6ZTogMS4xMjVyZW0gIWRlZmF1bHQ7XHJcbiRoNi1mb250LXNpemU6ICRmb250LXNpemUtYmFzZSAhZGVmYXVsdDtcclxuLy8gc2Nzcy1kb2NzLWVuZCBmb250LXZhcmlhYmxlc1xyXG5cclxuLy8gc2Nzcy1kb2NzLXN0YXJ0IGhlYWRpbmdzLXZhcmlhYmxlc1xyXG4kaGVhZGluZ3MtbWFyZ2luLWJvdHRvbTogJHNwYWNlciAhZGVmYXVsdDtcclxuJGhlYWRpbmdzLWZvbnQtd2VpZ2h0OiAkZm9udC13ZWlnaHQtc2VtaWJvbGQgIWRlZmF1bHQ7XHJcbiRoZWFkaW5ncy1saW5lLWhlaWdodDogMS4zNyAhZGVmYXVsdDtcclxuJGhlYWRpbmdzLWNvbG9yOiByZ2JhLXRvLWhleCgkZ3JheS05MDAsICRyZ2JhLXRvLWhleC1iZykgIWRlZmF1bHQ7XHJcbi8vIHNjc3MtZG9jcy1lbmQgaGVhZGluZ3MtdmFyaWFibGVzXHJcblxyXG4vLyBzY3NzLWRvY3Mtc3RhcnQgZGlzcGxheS1oZWFkaW5nc1xyXG4kZGlzcGxheS1mb250LXNpemVzOiAoXHJcbiAgMTogNC43NXJlbSxcclxuICAyOiA0LjM3NXJlbSxcclxuICAzOiAzLjg3NXJlbSxcclxuICA0OiAzLjM3NXJlbSxcclxuICA1OiAzcmVtLFxyXG4gIDY6IDIuNjI1cmVtXHJcbikgIWRlZmF1bHQ7XHJcblxyXG4kZGlzcGxheS1mb250LXdlaWdodDogNTAwICFkZWZhdWx0O1xyXG5cclxuLy8gc2Nzcy1kb2NzLWVuZCBkaXNwbGF5LWhlYWRpbmdzXHJcblxyXG4vLyBzY3NzLWRvY3Mtc3RhcnQgdHlwZS12YXJpYWJsZXNcclxuXHJcbiRsZWFkLWZvbnQtc2l6ZTogJHNwYWNlciAqIDEuMTI1ICFkZWZhdWx0O1xyXG5cclxuJHRpbnktZm9udC1zaXplOiA3MCUgIWRlZmF1bHQ7IC8vIChDKVxyXG4kc21hbGwtZm9udC1zaXplOiAwLjgxMjVyZW0gIWRlZmF1bHQ7XHJcbiRiaWctZm9udC1zaXplOiAxMTIlICFkZWZhdWx0OyAvLyAoQylcclxuJGxhcmdlLWZvbnQtc2l6ZTogMTUwJSAhZGVmYXVsdDsgLy8gKEMpXHJcbiR4bGFyZ2UtZm9udC1zaXplOiAxNzAlICFkZWZhdWx0OyAvLyAoQylcclxuXHJcbiR0ZXh0LW11dGVkOiByZ2JhLXRvLWhleCgkZ3JheS01MDAsICRyZ2JhLXRvLWhleC1iZykgIWRlZmF1bHQ7XHJcbiR0ZXh0LW11dGVkLWhvdmVyOiByZ2JhLXRvLWhleCgkZ3JheS02MDAsICRyZ2JhLXRvLWhleC1iZykgIWRlZmF1bHQ7IC8vIChDKVxyXG5cclxuJHRleHQtbGlnaHQ6IHJnYmEtdG8taGV4KCRncmF5LTQwMCwgJHJnYmEtdG8taGV4LWJnKSAhZGVmYXVsdDsgLy8gKEMpXHJcbiR0ZXh0LWxpZ2h0ZXI6IHJnYmEtdG8taGV4KCRncmF5LTMwMCwgJHJnYmEtdG8taGV4LWJnKSAhZGVmYXVsdDsgLy8gKEMpXHJcbiR0ZXh0LWxpZ2h0ZXN0OiByZ2JhLXRvLWhleCgkZ3JheS0yMDAsICRyZ2JhLXRvLWhleC1iZykgIWRlZmF1bHQ7IC8vIChDKVxyXG4vLyBzY3NzLWRvY3MtZW5kIHR5cGUtdmFyaWFibGVzXHJcblxyXG4vLyAqIFotaW5kZXggbWFzdGVyIGxpc3RcclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuJHppbmRleC1tZW51LWZpeGVkOiAxMDgwICFkZWZhdWx0O1xyXG4kemluZGV4LW1vZGFsOiAxMDkwICFkZWZhdWx0O1xyXG4kemluZGV4LW1vZGFsLWJhY2tkcm9wOiAkemluZGV4LW1vZGFsIC0gMSAhZGVmYXVsdDtcclxuLy8gJHppbmRleC1tb2RhbC10b3A6IDEwOTAgIWRlZmF1bHQ7IC8vIChDKVxyXG4kemluZGV4LW9mZmNhbnZhczogMTA5MCAhZGVmYXVsdDtcclxuJHppbmRleC1vZmZjYW52YXMtYmFja2Ryb3A6ICR6aW5kZXgtb2ZmY2FudmFzIC0gMSAhZGVmYXVsdDtcclxuJHppbmRleC1sYXlvdXQtbW9iaWxlOiAxMTAwICFkZWZhdWx0OyAvLyAoQylcclxuJHppbmRleC1wb3BvdmVyOiAxMDkxICFkZWZhdWx0O1xyXG4kemluZGV4LXRvYXN0OiAxMDk1ICFkZWZhdWx0OyAvLyAoQylcclxuJHppbmRleC10b29sdGlwOiAxMDk5ICFkZWZhdWx0O1xyXG4kemluZGV4LW5vdGlmaWNhdGlvbjogOTk5OTk5ICFkZWZhdWx0OyAvLyAoQylcclxuXHJcbi8vICogVGFibGVzXHJcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbi8vIHNjc3MtZG9jcy1zdGFydCB0YWJsZS12YXJpYWJsZXNcclxuJHRhYmxlLWNlbGwtcGFkZGluZy15OiAwLjU1cmVtICFkZWZhdWx0O1xyXG4kdGFibGUtY2VsbC1wYWRkaW5nLXg6IDEuMjVyZW0gIWRlZmF1bHQ7XHJcbiR0YWJsZS1jZWxsLXBhZGRpbmcteS1zbTogMC4yNXJlbSAhZGVmYXVsdDtcclxuJHRhYmxlLWNlbGwtcGFkZGluZy14LXNtOiAkdGFibGUtY2VsbC1wYWRkaW5nLXggIWRlZmF1bHQ7XHJcblxyXG4kdGFibGUtY2VsbC12ZXJ0aWNhbC1hbGlnbjogbWlkZGxlICFkZWZhdWx0O1xyXG5cclxuJHRhYmxlLXRoLWZvbnQtd2VpZ2h0OiAkZm9udC13ZWlnaHQtc2VtaWJvbGQgIWRlZmF1bHQ7XHJcblxyXG4kdGFibGUtc3RyaXBlZC1iZy1mYWN0b3I6IDAuMDIgIWRlZmF1bHQ7XHJcbiR0YWJsZS1zdHJpcGVkLWJnOiByZ2JhLXRvLWhleChyZ2JhKCRibGFjaywgJHRhYmxlLXN0cmlwZWQtYmctZmFjdG9yKSwgJHJnYmEtdG8taGV4LWJnKSAhZGVmYXVsdDtcclxuXHJcbiR0YWJsZS1hY3RpdmUtYmctZmFjdG9yOiAwLjA4ICFkZWZhdWx0O1xyXG4kdGFibGUtYWN0aXZlLWJnOiByZ2JhKCRwcmltYXJ5LCAkdGFibGUtYWN0aXZlLWJnLWZhY3RvcikgIWRlZmF1bHQ7XHJcblxyXG4kdGFibGUtaG92ZXItYmctZmFjdG9yOiAwLjA0ICFkZWZhdWx0O1xyXG5cclxuJHRhYmxlLWJvcmRlci1mYWN0b3I6IDAuMiAhZGVmYXVsdDtcclxuXHJcbiR0YWJsZS1iZy1zY2FsZTogLTkyJSAhZGVmYXVsdDtcclxuXHJcbi8vICogQnV0dG9ucyArIEZvcm1zXHJcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbiRpbnB1dC1idG4tcGFkZGluZy15OiAwLjZyZW0gIWRlZmF1bHQ7XHJcbiRpbnB1dC1idG4tcGFkZGluZy14OiAxLjI1cmVtICFkZWZhdWx0O1xyXG4kaW5wdXQtYnRuLWZvbnQtc2l6ZTogJGZvbnQtc2l6ZS1iYXNlICFkZWZhdWx0O1xyXG4kaW5wdXQtYnRuLWxpbmUtaGVpZ2h0OiAxLjEyNSAhZGVmYXVsdDtcclxuXHJcbiRpbnB1dC1idG4tZm9jdXMtd2lkdGg6IDAuMDVyZW0gIWRlZmF1bHQ7XHJcbiRpbnB1dC1idG4tZm9jdXMtY29sb3Itb3BhY2l0eTogMC4xICFkZWZhdWx0O1xyXG4kaW5wdXQtYnRuLWZvY3VzLWNvbG9yOiByZ2JhKCRjb21wb25lbnQtYWN0aXZlLWJnLCAkaW5wdXQtYnRuLWZvY3VzLWNvbG9yLW9wYWNpdHkpICFkZWZhdWx0O1xyXG4kaW5wdXQtYnRuLWZvY3VzLWJsdXI6IDAuMjVyZW0gIWRlZmF1bHQ7XHJcbiRpbnB1dC1idG4tZm9jdXMtYm94LXNoYWRvdzogMCAwICRpbnB1dC1idG4tZm9jdXMtYmx1ciAkaW5wdXQtYnRuLWZvY3VzLXdpZHRoICRpbnB1dC1idG4tZm9jdXMtY29sb3IgIWRlZmF1bHQ7XHJcblxyXG4kaW5wdXQtYnRuLXBhZGRpbmcteS14czogMC4xNzVyZW0gIWRlZmF1bHQ7IC8vIChDKVxyXG4kaW5wdXQtYnRuLXBhZGRpbmcteC14czogMC43NXJlbSAhZGVmYXVsdDsgLy8gKEMpXHJcbiRpbnB1dC1idG4tZm9udC1zaXplLXhzOiAkZm9udC1zaXplLXhzICFkZWZhdWx0OyAvLyAoQylcclxuJGlucHV0LWJ0bi1saW5lLWhlaWdodC14czogJGxpbmUtaGVpZ2h0LXhzICFkZWZhdWx0OyAvLyAoQylcclxuXHJcbiRpbnB1dC1idG4tcGFkZGluZy15LXNtOiAwLjQxcmVtICFkZWZhdWx0O1xyXG4kaW5wdXQtYnRuLXBhZGRpbmcteC1zbTogMC44NzVyZW0gIWRlZmF1bHQ7XHJcbiRpbnB1dC1idG4tZm9udC1zaXplLXNtOiAwLjgxMjVyZW0gIWRlZmF1bHQ7XHJcbiRpbnB1dC1idG4tbGluZS1oZWlnaHQtc206ICRsaW5lLWhlaWdodC1zbSAhZGVmYXVsdDtcclxuXHJcbiRpbnB1dC1idG4tcGFkZGluZy15LWxnOiAwLjg0cmVtICFkZWZhdWx0O1xyXG4kaW5wdXQtYnRuLXBhZGRpbmcteC1sZzogMS42MjVyZW0gIWRlZmF1bHQ7XHJcbiRpbnB1dC1idG4tZm9udC1zaXplLWxnOiAxLjA2MjVyZW0gIWRlZmF1bHQ7XHJcbiRpbnB1dC1idG4tbGluZS1oZWlnaHQtbGc6ICRsaW5lLWhlaWdodC1sZyAhZGVmYXVsdDtcclxuXHJcbiRpbnB1dC1idG4tcGFkZGluZy15LXhsOiAwLjg3NXJlbSAhZGVmYXVsdDsgLy8gKEMpXHJcbiRpbnB1dC1idG4tcGFkZGluZy14LXhsOiAxLjc1cmVtICFkZWZhdWx0OyAvLyAoQylcclxuJGlucHV0LWJ0bi1mb250LXNpemUteGw6ICRmb250LXNpemUteGwgIWRlZmF1bHQ7IC8vIChDKVxyXG4kaW5wdXQtYnRuLWxpbmUtaGVpZ2h0LXhsOiAkbGluZS1oZWlnaHQtbGcgIWRlZmF1bHQ7IC8vIChDKVxyXG5cclxuLy8gKiBCdXR0b25zXHJcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbiRidG4tcGFkZGluZy15LXhzOiAkaW5wdXQtYnRuLXBhZGRpbmcteS14cyAhZGVmYXVsdDsgLy8gKEMpXHJcbiRidG4tcGFkZGluZy14LXhzOiAkaW5wdXQtYnRuLXBhZGRpbmcteC14cyAhZGVmYXVsdDsgLy8gKEMpXHJcbiRidG4tZm9udC1zaXplLXhzOiAkaW5wdXQtYnRuLWZvbnQtc2l6ZS14cyAhZGVmYXVsdDsgLy8gKEMpXHJcblxyXG4kYnRuLXBhZGRpbmcteS14bDogJGlucHV0LWJ0bi1wYWRkaW5nLXkteGwgIWRlZmF1bHQ7IC8vIChDKVxyXG4kYnRuLXBhZGRpbmcteC14bDogJGlucHV0LWJ0bi1wYWRkaW5nLXgteGwgIWRlZmF1bHQ7IC8vIChDKVxyXG4kYnRuLWZvbnQtc2l6ZS14bDogJGlucHV0LWJ0bi1mb250LXNpemUteGwgIWRlZmF1bHQ7IC8vIChDKVxyXG5cclxuJGJ0bi1saW5lLWhlaWdodC14czogJGlucHV0LWJ0bi1saW5lLWhlaWdodC14cyAhZGVmYXVsdDsgLy8gKEMpXHJcbiRidG4tbGluZS1oZWlnaHQtc206ICRsaW5lLWhlaWdodC1zbTsgLy8oQylcclxuJGJ0bi1saW5lLWhlaWdodC1sZzogJGxpbmUtaGVpZ2h0LWxnOyAvLyhDKVxyXG4kYnRuLWxpbmUtaGVpZ2h0LXhsOiAkaW5wdXQtYnRuLWxpbmUtaGVpZ2h0LXhsICFkZWZhdWx0OyAvLyAoQylcclxuXHJcbiRidG4tZm9udC13ZWlnaHQ6IDUwMCAhZGVmYXVsdDtcclxuJGJ0bi1ib3gtc2hhZG93OiAwcHggMnB4IDRweCByZ2JhKDE2NSwgMTYzLCAxNzQsIDAuNCkgIWRlZmF1bHQ7XHJcbiRidG4tZm9jdXMtYm94LXNoYWRvdzogbm9uZSAhZGVmYXVsdDtcclxuJGJ0bi1hY3RpdmUtYm94LXNoYWRvdzogbm9uZSAhZGVmYXVsdDtcclxuXHJcbiRidG4tYm9yZGVyLXJhZGl1cy14czogJGJvcmRlci1yYWRpdXMtc20gIWRlZmF1bHQ7IC8vIChDKVxyXG4kYnRuLWJvcmRlci1yYWRpdXMteGw6ICRib3JkZXItcmFkaXVzLWxnICFkZWZhdWx0OyAvLyAoQylcclxuXHJcbiRidG4tdHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZS1pbi1vdXQgIWRlZmF1bHQ7XHJcblxyXG4kYnRuLWxhYmVsLWJnLXNoYWRlLWFtb3VudDogODQlICFkZWZhdWx0OyAvLyAoQylcclxuJGJ0bi1sYWJlbC1iZy10aW50LWFtb3VudDogODUlICFkZWZhdWx0OyAvLyAoQylcclxuJGJ0bi1sYWJlbC1ob3Zlci1zaGFkZS1hbW91bnQ6IDI2JSAhZGVmYXVsdDsgLy8gKEMpXHJcbiRidG4tbGFiZWwtaG92ZXItdGludC1hbW91bnQ6IDc2JSAhZGVmYXVsdDsgLy8gKEMpXHJcbiRidG4tbGFiZWwtZGlzYWJsZWQtYmctc2hhZGUtYW1vdW50OiA4NCUgIWRlZmF1bHQ7IC8vIChDKVxyXG4kYnRuLWxhYmVsLWRpc2FibGVkLWJnLXRpbnQtYW1vdW50OiA4NSUgIWRlZmF1bHQ7IC8vIChDKVxyXG5cclxuJGJ0bi1ob3Zlci1iZy1zaGFkZS1hbW91bnQ6IDEwJSAhZGVmYXVsdDtcclxuJGJ0bi1ob3Zlci1iZy10aW50LWFtb3VudDogMjUlICFkZWZhdWx0O1xyXG4kYnRuLWhvdmVyLWJvcmRlci1zaGFkZS1hbW91bnQ6IDEwJSAhZGVmYXVsdDtcclxuJGJ0bi1ob3Zlci1ib3JkZXItdGludC1hbW91bnQ6IDEwJSAhZGVmYXVsdDtcclxuJGJ0bi1hY3RpdmUtYmctc2hhZGUtYW1vdW50OiAxMCUgIWRlZmF1bHQ7XHJcbiRidG4tYWN0aXZlLWJnLXRpbnQtYW1vdW50OiAyMCUgIWRlZmF1bHQ7XHJcbiRidG4tYWN0aXZlLWJvcmRlci1zaGFkZS1hbW91bnQ6IDEwJSAhZGVmYXVsdDtcclxuJGJ0bi1hY3RpdmUtYm9yZGVyLXRpbnQtYW1vdW50OiAxMCUgIWRlZmF1bHQ7XHJcblxyXG4vLyBPdXRsaW5lIGJ1dHRvbnNcclxuJGJ0bi1vdXRsaW5lLWhvdmVyLWJnLXNoYWRlLWFtb3VudDogMTAlICFkZWZhdWx0OyAvLyAoQylcclxuJGJ0bi1vdXRsaW5lLWhvdmVyLWJnLXRpbnQtYW1vdW50OiA5MiUgIWRlZmF1bHQ7IC8vIChDKVxyXG4kYnRuLW91dGxpbmUtYWN0aXZlLWJnLXNoYWRlLWFtb3VudDogMTAlICFkZWZhdWx0OyAvLyAoQylcclxuJGJ0bi1vdXRsaW5lLWFjdGl2ZS1iZy10aW50LWFtb3VudDogODQlICFkZWZhdWx0OyAvLyAoQylcclxuXHJcbi8vICogRm9ybXNcclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuLy8gc2Nzcy1kb2NzLXN0YXJ0IGZvcm0tdGV4dC12YXJpYWJsZXNcclxuJGZvcm0tdGV4dC1mb250LXNpemU6ICRpbnB1dC1idG4tZm9udC1zaXplLXNtICFkZWZhdWx0O1xyXG4vLyBzY3NzLWRvY3MtZW5kIGZvcm0tdGV4dC12YXJpYWJsZXNcclxuXHJcbi8vIHNjc3MtZG9jcy1zdGFydCBmb3JtLWxhYmVsLXZhcmlhYmxlc1xyXG4kZm9ybS1sYWJlbC1tYXJnaW4tYm90dG9tOiAwLjI1cmVtICFkZWZhdWx0O1xyXG4kZm9ybS1sYWJlbC1mb250LXNpemU6ICRpbnB1dC1idG4tZm9udC1zaXplLXNtICFkZWZhdWx0O1xyXG4kZm9ybS1sYWJlbC1jb2xvcjogJGhlYWRpbmdzLWNvbG9yICFkZWZhdWx0O1xyXG4kZm9ybS1sYWJlbC1sZXR0ZXItc3BhY2luZzogaW5oZXJpdCAhZGVmYXVsdDsgLy8oQylcclxuJGZvcm0tbGFiZWwtdGV4dC10cmFuc2Zvcm06IGluaGVyaXQgIWRlZmF1bHQ7IC8vKEMpXHJcbi8vIHNjc3MtZG9jcy1lbmQgZm9ybS1sYWJlbC12YXJpYWJsZXNcclxuXHJcbi8vIHNjc3MtZG9jcy1zdGFydCBmb3JtLWlucHV0LXZhcmlhYmxlc1xyXG4kaW5wdXQtcGFkZGluZy15OiAwLjQyMnJlbSAhZGVmYXVsdDtcclxuJGlucHV0LXBhZGRpbmcteDogJGlucHV0LWJ0bi1wYWRkaW5nLXgtc20gIWRlZmF1bHQ7XHJcbiRpbnB1dC1saW5lLWhlaWdodDogJGxpbmUtaGVpZ2h0LXhsICFkZWZhdWx0O1xyXG4kaW5wdXQtZm9udC1zaXplOiAkaW5wdXQtYnRuLWZvbnQtc2l6ZSAhZGVmYXVsdDtcclxuXHJcbiRpbnB1dC1wYWRkaW5nLXktc206IDAuMjY2cmVtICFkZWZhdWx0O1xyXG4kaW5wdXQtcGFkZGluZy14LXNtOiAwLjYyNXJlbSAhZGVmYXVsdDtcclxuXHJcbiRpbnB1dC1wYWRkaW5nLXktbGc6IDAuNTk0cmVtICFkZWZhdWx0O1xyXG4kaW5wdXQtcGFkZGluZy14LWxnOiAkc3BhY2VyICFkZWZhdWx0O1xyXG4kaW5wdXQtZm9udC1zaXplLWxnOiAxLjEyNXJlbSAhZGVmYXVsdDtcclxuXHJcbiRpbnB1dC1iZzogJHdoaXRlICFkZWZhdWx0O1xyXG4kaW5wdXQtZGlzYWJsZWQtYmc6IHJnYmEoJGJsYWNrLCAwLjA4KSAhZGVmYXVsdDtcclxuXHJcbiRpbnB1dC1jb2xvcjogJGJvZHktY29sb3IgIWRlZmF1bHQ7XHJcbiRpbnB1dC1ib3JkZXItY29sb3I6ICRib3JkZXItY29sb3IgIWRlZmF1bHQ7XHJcblxyXG4kaW5wdXQtZm9jdXMtYm9yZGVyLWNvbG9yOiAkY29tcG9uZW50LWFjdGl2ZS1iZyAhZGVmYXVsdDtcclxuJGlucHV0LWZvY3VzLWJveC1zaGFkb3c6ICRib3gtc2hhZG93LXNtICFkZWZhdWx0O1xyXG5cclxuJGlucHV0LXBsYWNlaG9sZGVyLWNvbG9yOiByZ2JhLXRvLWhleCgkZ3JheS00MDAsICRyZ2JhLXRvLWhleC1iZykgIWRlZmF1bHQ7XHJcblxyXG4kaW5wdXQtaGVpZ2h0LWlubmVyOiBweC10by1yZW0oXHJcbiAgZmxvb3IocmVtLXRvLXB4KCgkaW5wdXQtYnRuLWZvbnQtc2l6ZSAqICRpbnB1dC1idG4tbGluZS1oZWlnaHQpICsgKCRpbnB1dC1idG4tcGFkZGluZy15ICogMikpKVxyXG4pICFkZWZhdWx0O1xyXG4kaW5wdXQtaGVpZ2h0LWlubmVyLXNtOiBweC10by1yZW0oXHJcbiAgZmxvb3IocmVtLXRvLXB4KCgkaW5wdXQtYnRuLWZvbnQtc2l6ZS1zbSAqICRpbnB1dC1idG4tbGluZS1oZWlnaHQtc20pICsgKCRpbnB1dC1idG4tcGFkZGluZy15LXNtICogMikpKVxyXG4pICFkZWZhdWx0OyAvLyAoQylcclxuJGlucHV0LWhlaWdodC1pbm5lci1sZzogcHgtdG8tcmVtKFxyXG4gIGZsb29yKHJlbS10by1weCgoJGZvbnQtc2l6ZS1sZyAqICRsaW5lLWhlaWdodC1sZykgKyAoJGlucHV0LWJ0bi1wYWRkaW5nLXktbGcgKiAyKSkpXHJcbikgIWRlZmF1bHQ7IC8vIChDKVxyXG4vLyBzY3NzLWRvY3MtZW5kIGZvcm0taW5wdXQtdmFyaWFibGVzXHJcblxyXG4vLyBzY3NzLWRvY3Mtc3RhcnQgZm9ybS1jaGVjay12YXJpYWJsZXNcclxuJGZvcm0tY2hlY2staW5wdXQtd2lkdGg6IDEuMmVtICFkZWZhdWx0O1xyXG4kZm9ybS1kYXRhdGFibGVzLWNoZWNrLWlucHV0LXNpemU6IDE3cHggIWRlZmF1bHQ7IC8vIChDKSBGb3IgZGF0YXRhYmxlcyB3aXRoIGNoZWNrYm94LSB1cGRhdGUgYWNjb3JkaW5nIHRvICRmb3JtLWNoZWNrLWlucHV0LXdpZHRoXHJcbiRmb3JtLWNoZWNrLW1pbi1oZWlnaHQ6ICRmb250LXNpemUtYmFzZSAqICRsaW5lLWhlaWdodC1iYXNlICFkZWZhdWx0O1xyXG4kZm9ybS1jaGVjay1pbnB1dC1ib3JkZXI6IDFweCBzb2xpZCAkaW5wdXQtYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xyXG5cclxuJGZvcm0tY2hlY2stbGFiZWwtZGlzYWJsZWQtY29sb3I6ICR0ZXh0LW11dGVkICFkZWZhdWx0OyAvLyAoQylSXHJcblxyXG4kZm9ybS1jaGVjay1pbnB1dC1mb2N1cy1ib3gtc2hhZG93OiAkaW5wdXQtZm9jdXMtYm94LXNoYWRvdyAhZGVmYXVsdDtcclxuXHJcbiRmb3JtLWNoZWNrLWlucHV0LWNoZWNrZWQtY29sb3I6ICRjb21wb25lbnQtYWN0aXZlLWNvbG9yICFkZWZhdWx0O1xyXG4kZm9ybS1jaGVjay1pbnB1dC1jaGVja2VkLWJnLWltYWdlOiB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgd2lkdGg9JzExJyBoZWlnaHQ9JzEzJyB2aWV3Qm94PScwIDAgMTUgMTQnIGZpbGw9J25vbmUnJTNFJTNDcGF0aCBkPSdNMy40MTY2NyA3TDYuMzMzMzMgOS45MTY2N0wxMi4xNjY3IDQuMDgzMzMnIHN0cm9rZT0nI3skZm9ybS1jaGVjay1pbnB1dC1jaGVja2VkLWNvbG9yfScgc3Ryb2tlLXdpZHRoPScxLjUnIHN0cm9rZS1saW5lY2FwPSdyb3VuZCcgc3Ryb2tlLWxpbmVqb2luPSdyb3VuZCcvJTNFJTNDL3N2ZyUzRVwiKSAhZGVmYXVsdDtcclxuXHJcbiRmb3JtLWNoZWNrLXJhZGlvLWNoZWNrZWQtYmctaW1hZ2U6IHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0Nzdmcgd2lkdGg9JzE4JyBoZWlnaHQ9JzE4JyB2aWV3Qm94PScwIDAgMTggMTgnIGZpbGw9J25vbmUnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyclM0UlM0NyZWN0IHg9JzUnIHk9JzUnIHdpZHRoPSc4JyBoZWlnaHQ9JzgnIHJ4PSc0JyBmaWxsPScjeyRmb3JtLWNoZWNrLWlucHV0LWNoZWNrZWQtY29sb3J9Jy8lM0UlM0Mvc3ZnJTNFJTBBXCIpICFkZWZhdWx0O1xyXG5cclxuJGZvcm0tY2hlY2staW5wdXQtaW5kZXRlcm1pbmF0ZS1jb2xvcjogJGNvbXBvbmVudC1hY3RpdmUtY29sb3IgIWRlZmF1bHQ7XHJcbiRmb3JtLWNoZWNrLWlucHV0LWluZGV0ZXJtaW5hdGUtYmctaW1hZ2U6IHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0Nzdmcgd2lkdGg9JzE4JyBoZWlnaHQ9JzE4JyB2aWV3Qm94PScwIDAgMTggMTgnIGZpbGw9J25vbmUnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyclM0UlM0NwYXRoIGQ9J001LjUgOUgxMi41JyBzdHJva2U9JyN7JGZvcm0tY2hlY2staW5wdXQtaW5kZXRlcm1pbmF0ZS1jb2xvcn0nIHN0cm9rZS13aWR0aD0nMS41JyBzdHJva2UtbGluZWNhcD0ncm91bmQnIHN0cm9rZS1saW5lam9pbj0ncm91bmQnLyUzRSUzQy9zdmclM0UlMEFcIikgIWRlZmF1bHQ7XHJcblxyXG4kZm9ybS1jaGVjay1pbnB1dC1kaXNhYmxlZC1iZzogcmdiYS10by1oZXgoJGdyYXktMjAwLCAkcmdiYS10by1oZXgtYmcpICFkZWZhdWx0OyAvLyAoQylcclxuLy8gc2Nzcy1kb2NzLWVuZCBmb3JtLWNoZWNrLXZhcmlhYmxlc1xyXG5cclxuLy8gc2Nzcy1kb2NzLXN0YXJ0IGZvcm0tc3dpdGNoLXZhcmlhYmxlc1xyXG4kZm9ybS1zd2l0Y2gtY29sb3I6ICRncmF5LTMwMCAhZGVmYXVsdDtcclxuJGZvcm0tc3dpdGNoLXdpZHRoOiAyZW0gIWRlZmF1bHQ7XHJcbiRmb3JtLXN3aXRjaC1wYWRkaW5nLXN0YXJ0OiAkZm9ybS1zd2l0Y2gtd2lkdGggKyAwLjVlbSAhZGVmYXVsdDtcclxuJGZvcm0tc3dpdGNoLWJnLWltYWdlOiB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIHdpZHRoPScxOCcgaGVpZ2h0PScxOCcgdmlld0JveD0nMCAwIDE4IDE4JyBmaWxsPSdub25lJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnJTNFJTNDY2lyY2xlIGN4PSc5JyBjeT0nOScgcj0nNicgZmlsbD0nI3skZm9ybS1zd2l0Y2gtY29sb3J9Jy8lM0UlM0Mvc3ZnJTNFJTBBXCIpICFkZWZhdWx0O1xyXG5cclxuJGZvcm0tc3dpdGNoLWZvY3VzLWNvbG9yOiAkaW5wdXQtZm9jdXMtYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xyXG4kZm9ybS1zd2l0Y2gtZm9jdXMtYmctaW1hZ2U6IHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0Nzdmcgd2lkdGg9JzE4JyBoZWlnaHQ9JzE4JyB2aWV3Qm94PScwIDAgMTggMTgnIGZpbGw9J25vbmUnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyclM0UlM0NjaXJjbGUgY3g9JzknIGN5PSc5JyByPSc2JyBmaWxsPScjeyRmb3JtLXN3aXRjaC1mb2N1cy1jb2xvcn0nLyUzRSUzQy9zdmclM0UlMEFcIikgIWRlZmF1bHQ7XHJcblxyXG4kZm9ybS1zd2l0Y2gtY2hlY2tlZC1jb2xvcjogJGNvbXBvbmVudC1hY3RpdmUtY29sb3IgIWRlZmF1bHQ7XHJcbiRmb3JtLXN3aXRjaC1jaGVja2VkLWJnLWltYWdlOiB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIHdpZHRoPScxOCcgaGVpZ2h0PScxOCcgdmlld0JveD0nMCAwIDE4IDE4JyBmaWxsPSdub25lJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnJTNFJTNDY2lyY2xlIGN4PSc5JyBjeT0nOScgcj0nNicgZmlsbD0nI3skZm9ybS1zd2l0Y2gtY2hlY2tlZC1jb2xvcn0nLyUzRSUzQy9zdmclM0UlMEFcIikgIWRlZmF1bHQ7XHJcblxyXG4kZm9ybS1zd2l0Y2gtY2hlY2tlZC1iZy1wb3NpdGlvbi1ydGw6IGxlZnQgY2VudGVyICFkZWZhdWx0OyAvLyhDKVxyXG4vLyBzY3NzLWRvY3MtZW5kIGZvcm0tc3dpdGNoLXZhcmlhYmxlc1xyXG5cclxuLy9pbnB1dC1ncm91cC12YXJpYWJsZXNcclxuJGlucHV0LWdyb3VwLWFkZG9uLXBhZGRpbmcteDogJGlucHV0LWJ0bi1wYWRkaW5nLXgteHMgIWRlZmF1bHQ7XHJcbiRpbnB1dC1ncm91cC1hZGRvbi1iZzogJGlucHV0LWJnICFkZWZhdWx0O1xyXG4vLyBzY3NzLWRvY3MtZW5kIGlucHV0LWdyb3VwLXZhcmlhYmxlc1xyXG5cclxuLy8gc2Nzcy1kb2NzLXN0YXJ0IGZvcm0tc2VsZWN0LXZhcmlhYmxlc1xyXG4kZm9ybS1zZWxlY3QtcGFkZGluZy15OiAkaW5wdXQtcGFkZGluZy15ICFkZWZhdWx0O1xyXG4kZm9ybS1zZWxlY3QtcGFkZGluZy14OiAkaW5wdXQtcGFkZGluZy14ICFkZWZhdWx0O1xyXG4kZm9ybS1zZWxlY3QtaW5kaWNhdG9yLXBhZGRpbmc6ICRmb3JtLXNlbGVjdC1wYWRkaW5nLXggKiAyLjggIWRlZmF1bHQ7XHJcbiRmb3JtLXNlbGVjdC1kaXNhYmxlZC1jb2xvcjogJHRleHQtbXV0ZWQgIWRlZmF1bHQ7XHJcbiRmb3JtLXNlbGVjdC1kaXNhYmxlZC1iZzogJGlucHV0LWRpc2FibGVkLWJnICFkZWZhdWx0O1xyXG4kZm9ybS1zZWxlY3QtYmctc2l6ZTogMjJweCAyMHB4ICFkZWZhdWx0O1xyXG4kZm9ybS1zZWxlY3QtaW5kaWNhdG9yLWNvbG9yOiAkYm9keS1jb2xvciAhZGVmYXVsdDtcclxuJGZvcm0tc2VsZWN0LWluZGljYXRvcjogdXJsKFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyB3aWR0aD0nMjAnIGhlaWdodD0nMjAnIHZpZXdCb3g9JzAgMCAyMCAyMCcgZmlsbD0nbm9uZScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyUzRSUzQ3BhdGggZD0nTTUgNy41TDEwIDEyLjVMMTUgNy41JyBzdHJva2U9JyN7JGZvcm0tc2VsZWN0LWluZGljYXRvci1jb2xvcn0nIHN0cm9rZS13aWR0aD0nMS41JyBzdHJva2UtbGluZWNhcD0ncm91bmQnIHN0cm9rZS1saW5lam9pbj0ncm91bmQnLyUzRSUzQ3BhdGggZD0nTTUgNy41TDEwIDEyLjVMMTUgNy41JyBzdHJva2U9J3doaXRlJyBzdHJva2Utb3BhY2l0eT0nMC4yJyBzdHJva2Utd2lkdGg9JzEuNScgc3Ryb2tlLWxpbmVjYXA9J3JvdW5kJyBzdHJva2UtbGluZWpvaW49J3JvdW5kJy8lM0UlM0Mvc3ZnJTNFXCIpICFkZWZhdWx0O1xyXG5cclxuJGZvcm0tc2VsZWN0LWZvY3VzLWJveC1zaGFkb3c6ICRpbnB1dC1mb2N1cy1ib3gtc2hhZG93ICFkZWZhdWx0O1xyXG5cclxuJGZvcm0tc2VsZWN0LXBhZGRpbmcteS1zbTogJGlucHV0LXBhZGRpbmcteS1zbSAhZGVmYXVsdDtcclxuJGZvcm0tc2VsZWN0LXBhZGRpbmcteC1zbTogJGlucHV0LXBhZGRpbmcteC1zbSAhZGVmYXVsdDtcclxuXHJcbiRmb3JtLXNlbGVjdC1wYWRkaW5nLXktbGc6ICRpbnB1dC1wYWRkaW5nLXktbGcgIWRlZmF1bHQ7XHJcbiRmb3JtLXNlbGVjdC1wYWRkaW5nLXgtbGc6ICRpbnB1dC1wYWRkaW5nLXgtbGcgIWRlZmF1bHQ7XHJcbi8vIHNjc3MtZG9jcy1lbmQgZm9ybS1zZWxlY3QtdmFyaWFibGVzXHJcblxyXG4vLyBzY3NzLWRvY3Mtc3RhcnQgZm9ybS1yYW5nZS12YXJpYWJsZXNcclxuJGZvcm0tcmFuZ2UtdHJhY2staGVpZ2h0OiAwLjEyNXJlbSAhZGVmYXVsdDtcclxuJGZvcm0tcmFuZ2UtdHJhY2stYmc6ICRncmF5LTIwMCAhZGVmYXVsdDtcclxuJGZvcm0tcmFuZ2UtdHJhY2stYm94LXNoYWRvdzogbm9uZSAhZGVmYXVsdDtcclxuJGZvcm0tcmFuZ2UtdHJhY2stZGlzYWJsZWQtYmc6ICRncmF5LTUwICFkZWZhdWx0OyAvLyAoQylcclxuXHJcbiRmb3JtLXJhbmdlLXRodW1iLXdpZHRoOiAwLjc1cmVtICFkZWZhdWx0O1xyXG4kZm9ybS1yYW5nZS10aHVtYi1oZWlnaHQ6ICRmb3JtLXJhbmdlLXRodW1iLXdpZHRoICFkZWZhdWx0O1xyXG4kZm9ybS1yYW5nZS10aHVtYi1iZzogJHdoaXRlICFkZWZhdWx0O1xyXG4kZm9ybS1yYW5nZS10aHVtYi1ib3gtc2hhZG93OiAwIDAgMCAxcHggcmdiYSgkYmxhY2ssIDAuMSksICRmbG9hdGluZy1jb21wb25lbnQtc2hhZG93ICFkZWZhdWx0O1xyXG4kZm9ybS1yYW5nZS10aHVtYi1mb2N1cy1ib3gtc2hhZG93OiAwIDAgMCAzcHggcmdiYSgkYmxhY2ssIDAuMSksICRmbG9hdGluZy1jb21wb25lbnQtc2hhZG93ICFkZWZhdWx0O1xyXG4kZm9ybS1yYW5nZS10aHVtYi1hY3RpdmUtYmc6ICRmb3JtLXJhbmdlLXRodW1iLWJnICFkZWZhdWx0O1xyXG4kZm9ybS1yYW5nZS10aHVtYi1kaXNhYmxlZC1iZzogcmdiYS10by1oZXgoJGdyYXktMjAwLCAkcmdiYS10by1oZXgtYmcpICFkZWZhdWx0O1xyXG4vLyBzY3NzLWRvY3MtZW5kIGZvcm0tcmFuZ2UtdmFyaWFibGVzXHJcblxyXG4vLyBzY3NzLWRvY3Mtc3RhcnQgZm9ybS1mbG9hdGluZy12YXJpYWJsZXNcclxuJGZvcm0tZmxvYXRpbmctbGFiZWwtb3BhY2l0eTogMC43NSAhZGVmYXVsdDtcclxuJGZvcm0tZmxvYXRpbmctdHJhbnNpdGlvbjogb3BhY2l0eSAwLjJzIGVhc2UtaW4tb3V0LCB0cmFuc2Zvcm0gMC4ycyBlYXNlLWluLW91dCAhZGVmYXVsdDtcclxuJGZvcm0tZmxvYXRpbmctbGFiZWwtdHJhbnNmb3JtLXJ0bDogc2NhbGUoMC44NSkgdHJhbnNsYXRlWSgtMC41cmVtKSB0cmFuc2xhdGVYKC0wLjE1cmVtKSAhZGVmYXVsdDsgLy8gKEMpXHJcbi8vIHNjc3MtZG9jcy1lbmQgZm9ybS1mbG9hdGluZy12YXJpYWJsZXNcclxuXHJcbi8vIEZvcm0gdmFsaWRhdGlvblxyXG5cclxuLy8gc2Nzcy1kb2NzLXN0YXJ0IGZvcm0tZmVlZGJhY2stdmFyaWFibGVzXHJcbiRmb3JtLWZlZWRiYWNrLXZhbGlkLWNvbG9yOiAkc3VjY2VzcyAhZGVmYXVsdDtcclxuJGZvcm0tZmVlZGJhY2staW52YWxpZC1jb2xvcjogJGRhbmdlciAhZGVmYXVsdDtcclxuXHJcbiRmb3JtLXNlbGVjdC1mZWVkYmFjay1pY29uLXBhZGRpbmc6ICRmb3JtLXNlbGVjdC1pbmRpY2F0b3ItcGFkZGluZyArICRpbnB1dC1oZWlnaHQtaW5uZXIgIWRlZmF1bHQ7IC8vIChDKVxyXG4kZm9ybS1zZWxlY3QtZmVlZGJhY2staWNvbi1wYWRkaW5nLXNtOiAkZm9ybS1zZWxlY3QtaW5kaWNhdG9yLXBhZGRpbmcgKyAkaW5wdXQtaGVpZ2h0LWlubmVyLXNtICFkZWZhdWx0OyAvLyAoQylcclxuJGZvcm0tc2VsZWN0LWZlZWRiYWNrLWljb24tcGFkZGluZy1sZzogJGZvcm0tc2VsZWN0LWluZGljYXRvci1wYWRkaW5nICsgJGlucHV0LWhlaWdodC1pbm5lci1sZyAhZGVmYXVsdDsgLy8gKEMpXHJcbi8vIHNjc3MtZG9jcy1lbmQgZm9ybS1mZWVkYmFjay12YXJpYWJsZXNcclxuXHJcbi8vICogTmF2c1xyXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG4kbmF2LXNwYWNlcjogMC4xMjVyZW0gIWRlZmF1bHQ7IC8vIChDKVxyXG5cclxuJG5hdi1saW5rLXBhZGRpbmcteTogMC41NDNyZW0gIWRlZmF1bHQ7XHJcbiRuYXYtbGluay1wYWRkaW5nLXg6IDEuMjVyZW0gIWRlZmF1bHQ7XHJcbiRuYXYtbGluay1jb2xvcjogJGhlYWRpbmdzLWNvbG9yICFkZWZhdWx0O1xyXG4kbmF2LWxpbmstZGlzYWJsZWQtY29sb3I6ICR0ZXh0LW11dGVkICFkZWZhdWx0O1xyXG4kbmF2LWxpbmstbGluZS1oZWlnaHQ6ICRsaW5lLWhlaWdodC1sZyAhZGVmYXVsdDsgLy8gKEMpXHJcblxyXG4kbmF2LWxpbmstcGFkZGluZy15LWxnOiAwLjZyZW0gIWRlZmF1bHQ7IC8vIChDKVxyXG4kbmF2LWxpbmstcGFkZGluZy14LWxnOiAxLjVyZW0gIWRlZmF1bHQ7IC8vIChDKVxyXG4kbmF2LWxpbmstbGluZS1oZWlnaHQtbGc6ICRsaW5lLWhlaWdodC1sZyAhZGVmYXVsdDsgLy8gKEMpXHJcblxyXG4kbmF2LWxpbmstcGFkZGluZy15LXNtOiAwLjM3NnJlbSAhZGVmYXVsdDsgLy8gKEMpXHJcbiRuYXYtbGluay1wYWRkaW5nLXgtc206IDFyZW0gIWRlZmF1bHQ7IC8vIChDKVxyXG4kbmF2LWxpbmstbGluZS1oZWlnaHQtc206ICRsaW5lLWhlaWdodC1zbSAhZGVmYXVsdDsgLy8gKEMpXHJcblxyXG4kbmF2LXRhYnMtYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCAhZGVmYXVsdDtcclxuJG5hdi10YWJzLWxpbmstYWN0aXZlLWNvbG9yOiAkY29tcG9uZW50LWFjdGl2ZS1iZyAhZGVmYXVsdDtcclxuJG5hdi10YWJzLWxpbmstYWN0aXZlLWJnOiAkd2hpdGUgIWRlZmF1bHQ7XHJcblxyXG4vLyAqIE5hdmJhclxyXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG4kbmF2YmFyLXRvZ2dsZXItcGFkZGluZy15OiAwLjVyZW0gIWRlZmF1bHQ7XHJcbiRuYXZiYXItdG9nZ2xlci1wYWRkaW5nLXg6IDAuN3JlbSAhZGVmYXVsdDtcclxuJG5hdmJhci10b2dnbGVyLWZvbnQtc2l6ZTogMC42MjVyZW0gIWRlZmF1bHQ7XHJcblxyXG4kbmF2YmFyLWRhcmstY29sb3I6IHJnYmEoJHdoaXRlLCAwLjgpICFkZWZhdWx0O1xyXG4kbmF2YmFyLWRhcmstaG92ZXItY29sb3I6ICR3aGl0ZSAhZGVmYXVsdDtcclxuJG5hdmJhci1kYXJrLWFjdGl2ZS1jb2xvcjogJHdoaXRlICFkZWZhdWx0O1xyXG4kbmF2YmFyLWRhcmstZGlzYWJsZWQtY29sb3I6IHJnYmEoJHdoaXRlLCAwLjQpICFkZWZhdWx0O1xyXG4kbmF2YmFyLWRhcmstdG9nZ2xlci1pY29uLWJnOiB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIHdpZHRoPScxNHB4JyBoZWlnaHQ9JzExcHgnIHZpZXdCb3g9JzAgMCAxNCAxMScgdmVyc2lvbj0nMS4xJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHhtbG5zOnhsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyUzRSUzQ2RlZnMlM0UlM0NwYXRoIGQ9J00wLDAgTDE0LDAgTDE0LDEuNzUgTDAsMS43NSBMMCwwIFogTTAsNC4zNzUgTDE0LDQuMzc1IEwxNCw2LjEyNSBMMCw2LjEyNSBMMCw0LjM3NSBaIE0wLDguNzUgTDE0LDguNzUgTDE0LDEwLjUgTDAsMTAuNSBMMCw4Ljc1IFonIGlkPSdwYXRoLTEnJTNFJTNDL3BhdGglM0UlM0MvZGVmcyUzRSUzQ2cgaWQ9J/Cfko4tVUktRWxlbWVudHMnIHN0cm9rZT0nbm9uZScgc3Ryb2tlLXdpZHRoPScxJyBmaWxsPSdub25lJyBmaWxsLXJ1bGU9J2V2ZW5vZGQnJTNFJTNDZyBpZD0nMTIpLU5hdmJhcicgdHJhbnNmb3JtPSd0cmFuc2xhdGUoLTExNzQuMDAwMDAwLCAtMTI5MC4wMDAwMDApJyUzRSUzQ2cgaWQ9J0dyb3VwJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgxMTc0LjAwMDAwMCwgMTI4OC4wMDAwMDApJyUzRSUzQ2cgaWQ9J0ljb24tQ29sb3InIHRyYW5zZm9ybT0ndHJhbnNsYXRlKDAuMDAwMDAwLCAyLjAwMDAwMCknJTNFJTNDdXNlIGZpbGw9JyN7JG5hdmJhci1kYXJrLWNvbG9yfScgeGxpbms6aHJlZj0nJTIzcGF0aC0xJyUzRSUzQy91c2UlM0UlM0N1c2UgZmlsbC1vcGFjaXR5PScwLjEnIGZpbGw9JyN7JG5hdmJhci1kYXJrLWNvbG9yfScgeGxpbms6aHJlZj0nJTIzcGF0aC0xJyUzRSUzQy91c2UlM0UlM0MvZyUzRSUzQy9nJTNFJTNDL2clM0UlM0MvZyUzRSUzQy9zdmclM0VcIikgIWRlZmF1bHQ7XHJcblxyXG4kbmF2YmFyLWxpZ2h0LWNvbG9yOiAkZ3JheS01MDAgIWRlZmF1bHQ7XHJcbiRuYXZiYXItbGlnaHQtaG92ZXItY29sb3I6ICRib2R5LWNvbG9yICFkZWZhdWx0O1xyXG4kbmF2YmFyLWxpZ2h0LWFjdGl2ZS1jb2xvcjogJGJvZHktY29sb3IgIWRlZmF1bHQ7XHJcbiRuYXZiYXItbGlnaHQtZGlzYWJsZWQtY29sb3I6ICRncmF5LTMwMCAhZGVmYXVsdDtcclxuJG5hdmJhci1saWdodC10b2dnbGVyLWljb24tYmc6IHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0Nzdmcgd2lkdGg9JzE0cHgnIGhlaWdodD0nMTFweCcgdmlld0JveD0nMCAwIDE0IDExJyB2ZXJzaW9uPScxLjEnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycgeG1sbnM6eGxpbms9J2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnJTNFJTNDZGVmcyUzRSUzQ3BhdGggZD0nTTAsMCBMMTQsMCBMMTQsMS43NSBMMCwxLjc1IEwwLDAgWiBNMCw0LjM3NSBMMTQsNC4zNzUgTDE0LDYuMTI1IEwwLDYuMTI1IEwwLDQuMzc1IFogTTAsOC43NSBMMTQsOC43NSBMMTQsMTAuNSBMMCwxMC41IEwwLDguNzUgWicgaWQ9J3BhdGgtMSclM0UlM0MvcGF0aCUzRSUzQy9kZWZzJTNFJTNDZyBpZD0n8J+Sji1VSS1FbGVtZW50cycgc3Ryb2tlPSdub25lJyBzdHJva2Utd2lkdGg9JzEnIGZpbGw9J25vbmUnIGZpbGwtcnVsZT0nZXZlbm9kZCclM0UlM0NnIGlkPScxMiktTmF2YmFyJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgtMTE3NC4wMDAwMDAsIC0xMjkwLjAwMDAwMCknJTNFJTNDZyBpZD0nR3JvdXAnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKDExNzQuMDAwMDAwLCAxMjg4LjAwMDAwMCknJTNFJTNDZyBpZD0nSWNvbi1Db2xvcicgdHJhbnNmb3JtPSd0cmFuc2xhdGUoMC4wMDAwMDAsIDIuMDAwMDAwKSclM0UlM0N1c2UgZmlsbD0nI3skbmF2YmFyLWxpZ2h0LWNvbG9yfScgeGxpbms6aHJlZj0nJTIzcGF0aC0xJyUzRSUzQy91c2UlM0UlM0N1c2UgZmlsbC1vcGFjaXR5PScwLjEnIGZpbGw9JyN7JG5hdmJhci1saWdodC1jb2xvcn0nIHhsaW5rOmhyZWY9JyUyM3BhdGgtMSclM0UlM0MvdXNlJTNFJTNDL2clM0UlM0MvZyUzRSUzQy9nJTNFJTNDL2clM0UlM0Mvc3ZnJTNFXCIpICFkZWZhdWx0O1xyXG5cclxuJG5hdmJhci1saWdodC10b2dnbGVyLWJvcmRlci1jb2xvcjogcmdiYSgkYmxhY2ssIDAuMDYpICFkZWZhdWx0O1xyXG4kbmF2YmFyLWRyb3Bkb3duLWhvdmVyLWJnOiByZ2JhKCRibGFjaywgMC4wNCkgIWRlZmF1bHQ7IC8vIChDKVxyXG4kbmF2YmFyLWRyb3Bkb3duLWljb24tYmc6IHJnYmEoJGJsYWNrLCAwLjA4KSAhZGVmYXVsdDsgLy8gKEMpXHJcblxyXG4vLyAqIERyb3Bkb3duc1xyXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG4kZHJvcGRvd24tc3BhY2VyOiAwLjI1cmVtICFkZWZhdWx0O1xyXG4kZHJvcGRvd24tYm9yZGVyLXdpZHRoOiAwcHggIWRlZmF1bHQ7XHJcbiRkcm9wZG93bi1ib3JkZXItY29sb3I6ICRib3JkZXItY29sb3IgIWRlZmF1bHQ7XHJcbiRkcm9wZG93bi1ib3gtc2hhZG93OiAkYm94LXNoYWRvdyAhZGVmYXVsdDtcclxuXHJcbiRkcm9wZG93bi1pbm5lci1ib3JkZXItcmFkaXVzOiAwcHggIWRlZmF1bHQ7XHJcblxyXG4kZHJvcGRvd24tbGluay1jb2xvcjogJGhlYWRpbmdzLWNvbG9yICFkZWZhdWx0O1xyXG4kZHJvcGRvd24tbGluay1ob3Zlci1jb2xvcjogJGNvbXBvbmVudC1ob3Zlci1jb2xvciAhZGVmYXVsdDtcclxuJGRyb3Bkb3duLWxpbmstaG92ZXItYmc6ICRjb21wb25lbnQtaG92ZXItYmcgIWRlZmF1bHQ7XHJcbiRkcm9wZG93bi1saW5rLWxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQtbGcgIWRlZmF1bHQ7IC8vIChDKVxyXG5cclxuJGRyb3Bkb3duLWl0ZW0tcGFkZGluZy15OiAwLjQycmVtICFkZWZhdWx0O1xyXG4kZHJvcGRvd24taXRlbS1wYWRkaW5nLXg6IDFyZW0gIWRlZmF1bHQ7XHJcblxyXG4kZHJvcGRvd24tbGluay1kaXNhYmxlZC1jb2xvcjogJHRleHQtbGlnaHRlciAhZGVmYXVsdDtcclxuJGRyb3Bkb3duLWhlYWRlci1jb2xvcjogJHRleHQtbXV0ZWQgIWRlZmF1bHQ7XHJcblxyXG4vLyAqIFBhZ2luYXRpb25cclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuJHBhZ2luYXRpb24tcGFkZGluZy15OiAwLjU5NHJlbSAhZGVmYXVsdDtcclxuJHBhZ2luYXRpb24tcGFkZGluZy14OiAwLjM1cmVtICFkZWZhdWx0O1xyXG4kcGFnaW5hdGlvbi1wYWRkaW5nLXktc206IDAuNXJlbSAhZGVmYXVsdDtcclxuJHBhZ2luYXRpb24tcGFkZGluZy14LXNtOiAwLjE1cmVtICFkZWZhdWx0O1xyXG4kcGFnaW5hdGlvbi1wYWRkaW5nLXktbGc6IDAuODc1cmVtICFkZWZhdWx0O1xyXG4kcGFnaW5hdGlvbi1wYWRkaW5nLXgtbGc6IDAuNHJlbSAhZGVmYXVsdDtcclxuXHJcbiRwYWdpbmF0aW9uLWJvcmRlci13aWR0aDogMHB4ICFkZWZhdWx0O1xyXG5cclxuJHBhZ2luYXRpb24tbGluZS1oZWlnaHQ6IDEgIWRlZmF1bHQ7IC8vIChjKVxyXG5cclxuJHBhZ2luYXRpb24tY29sb3I6ICRoZWFkaW5ncy1jb2xvciAhZGVmYXVsdDtcclxuJHBhZ2luYXRpb24tYmc6IHJnYmEoJGJsYWNrLCAwLjA4KSAhZGVmYXVsdDtcclxuJHBhZ2luYXRpb24tbWFyZ2luLXN0YXJ0OiAwLjI1cmVtICFkZWZhdWx0O1xyXG4kcGFnaW5hdGlvbi1ib3JkZXItY29sb3I6ICRwYWdpbmF0aW9uLWJnICFkZWZhdWx0O1xyXG5cclxuJHBhZ2luYXRpb24tZm9jdXMtY29sb3I6ICRwYWdpbmF0aW9uLWNvbG9yICFkZWZhdWx0O1xyXG4kcGFnaW5hdGlvbi1mb2N1cy1iZzogcmdiYSgkYmxhY2ssIDAuMTYpICFkZWZhdWx0O1xyXG4kcGFnaW5hdGlvbi1mb2N1cy1ib3gtc2hhZG93OiBub25lICFkZWZhdWx0O1xyXG5cclxuJHBhZ2luYXRpb24taG92ZXItY29sb3I6ICRwYWdpbmF0aW9uLWZvY3VzLWNvbG9yICFkZWZhdWx0O1xyXG4kcGFnaW5hdGlvbi1ob3Zlci1iZzogJHBhZ2luYXRpb24tZm9jdXMtYmcgIWRlZmF1bHQ7XHJcbiRwYWdpbmF0aW9uLWhvdmVyLWJvcmRlci1jb2xvcjogJHBhZ2luYXRpb24taG92ZXItYmcgIWRlZmF1bHQ7XHJcblxyXG4kcGFnaW5hdGlvbi1kaXNhYmxlZC1jb2xvcjogJHRleHQtbXV0ZWQgIWRlZmF1bHQ7XHJcbiRwYWdpbmF0aW9uLWRpc2FibGVkLWJnOiAkcGFnaW5hdGlvbi1iZyAhZGVmYXVsdDtcclxuJHBhZ2luYXRpb24tZGlzYWJsZWQtYm9yZGVyLWNvbG9yOiAkcGFnaW5hdGlvbi1kaXNhYmxlZC1iZyAhZGVmYXVsdDtcclxuXHJcbi8vICogQ2FyZHNcclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuJGNhcmQtc3BhY2VyLXk6ICRzcGFjZXIgKiAxLjUgIWRlZmF1bHQ7XHJcbiRjYXJkLXNwYWNlci14OiAkc3BhY2VyICogMS41ICFkZWZhdWx0O1xyXG4kY2FyZC10aXRsZS1zcGFjZXIteTogJHNwYWNlciAqIDAuODc1ICFkZWZhdWx0O1xyXG4kY2FyZC1zcGFjZXIteC1zbTogMXJlbSAhZGVmYXVsdDsgLy8gKEMpXHJcbiRjYXJkLWJvcmRlci13aWR0aDogMCAhZGVmYXVsdDtcclxuJGNhcmQtYm9yZGVyLWNvbG9yOiAkYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xyXG4kY2FyZC1pbm5lci1ib3JkZXItY29sb3I6ICRib3JkZXItaW5uZXItY29sb3IgIWRlZmF1bHQ7IC8vIChDKVxyXG4kY2FyZC1jYXAtcGFkZGluZy15OiAkc3BhY2VyICogMS41ICFkZWZhdWx0O1xyXG4kY2FyZC1jYXAtYmc6IHRyYW5zcGFyZW50ICFkZWZhdWx0O1xyXG4kY2FyZC1iZzogJHdoaXRlICFkZWZhdWx0O1xyXG4kY2FyZC1pbWctb3ZlcmxheS1wYWRkaW5nOiAxLjVyZW0gIWRlZmF1bHQ7XHJcbiRjYXJkLWJveC1zaGFkb3c6IDAgMC4yNXJlbSAxLjEyNXJlbSByZ2JhKCRibGFjaywgMC4xKSAhZGVmYXVsdDtcclxuXHJcbi8vICogQWNjb3JkaW9uXHJcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbiRhY2NvcmRpb24tcGFkZGluZy15OiAwLjgycmVtICFkZWZhdWx0O1xyXG4kYWNjb3JkaW9uLXBhZGRpbmcteDogMS4xMjVyZW0gIWRlZmF1bHQ7XHJcbiRhY2NvcmRpb24tYmc6ICRjYXJkLWJnICFkZWZhdWx0O1xyXG4kYWNjb3JkaW9uLWJ1dHRvbi1jb2xvcjogJGhlYWRpbmdzLWNvbG9yICFkZWZhdWx0O1xyXG5cclxuJGFjY29yZGlvbi1ib3JkZXItY29sb3I6ICRjYXJkLWJnICFkZWZhdWx0O1xyXG4kYWNjb3JkaW9uLWJ1dHRvbi1hY3RpdmUtYmc6ICRhY2NvcmRpb24tYmcgIWRlZmF1bHQ7XHJcbiRhY2NvcmRpb24tYnV0dG9uLWFjdGl2ZS1jb2xvcjogJGFjY29yZGlvbi1idXR0b24tY29sb3IgIWRlZmF1bHQ7XHJcblxyXG4kYWNjb3JkaW9uLWljb24td2lkdGg6IDEuMTI1cmVtICFkZWZhdWx0O1xyXG4kYWNjb3JkaW9uLWljb24tY29sb3I6ICRhY2NvcmRpb24tYnV0dG9uLWNvbG9yICFkZWZhdWx0O1xyXG4kYWNjb3JkaW9uLWljb24tYWN0aXZlLWNvbG9yOiAkYWNjb3JkaW9uLWJ1dHRvbi1hY3RpdmUtY29sb3IgIWRlZmF1bHQ7XHJcblxyXG4kYWNjb3JkaW9uLWljb24tdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpICFkZWZhdWx0O1xyXG5cclxuJGFjY29yZGlvbi1idXR0b24taWNvbjogdXJsKFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyB3aWR0aD0nMjAnIGhlaWdodD0nMjEnIHZpZXdCb3g9JzAgMCAyMCAyMScgZmlsbD0nbm9uZScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyUzRSUzQ3BhdGggZD0nTTcuNSA1LjVMMTIuNSAxMC41TDcuNSAxNS41JyBzdHJva2U9JyN7JGFjY29yZGlvbi1pY29uLWNvbG9yfScgc3Ryb2tlLXdpZHRoPScxLjc1JyBzdHJva2UtbGluZWNhcD0ncm91bmQnIHN0cm9rZS1saW5lam9pbj0ncm91bmQnLyUzRSUzQ3BhdGggZD0nTTcuNSA1LjVMMTIuNSAxMC41TDcuNSAxNS41JyBzdHJva2U9J3doaXRlJyBzdHJva2Utb3BhY2l0eT0nMC4xJyBzdHJva2Utd2lkdGg9JzEuNzUnIHN0cm9rZS1saW5lY2FwPSdyb3VuZCcgc3Ryb2tlLWxpbmVqb2luPSdyb3VuZCcvJTNFJTNDL3N2ZyUzRSUwQVwiKSAhZGVmYXVsdDtcclxuXHJcbiRhY2NvcmRpb24tYnV0dG9uLWFjdGl2ZS1pY29uOiB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIHdpZHRoPScyMCcgaGVpZ2h0PScyMScgdmlld0JveD0nMCAwIDIwIDIxJyBmaWxsPSdub25lJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnJTNFJTNDcGF0aCBkPSdNNy41IDUuNUwxMi41IDEwLjVMNy41IDE1LjUnIHN0cm9rZT0nI3skYWNjb3JkaW9uLWljb24tY29sb3J9JyBzdHJva2Utd2lkdGg9JzEuNzUnIHN0cm9rZS1saW5lY2FwPSdyb3VuZCcgc3Ryb2tlLWxpbmVqb2luPSdyb3VuZCcvJTNFJTNDcGF0aCBkPSdNNy41IDUuNUwxMi41IDEwLjVMNy41IDE1LjUnIHN0cm9rZT0nd2hpdGUnIHN0cm9rZS1vcGFjaXR5PScwLjEnIHN0cm9rZS13aWR0aD0nMS43NScgc3Ryb2tlLWxpbmVjYXA9J3JvdW5kJyBzdHJva2UtbGluZWpvaW49J3JvdW5kJy8lM0UlM0Mvc3ZnJTNFJTBBXCIpICFkZWZhdWx0O1xyXG5cclxuLy8gKiBUb29sdGlwc1xyXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG4kdG9vbHRpcC1mb250LXNpemU6ICRmb250LXNpemUtYmFzZSAhZGVmYXVsdDtcclxuJHRvb2x0aXAtYmc6ICRkYXJrICFkZWZhdWx0O1xyXG4kdG9vbHRpcC1vcGFjaXR5OiAxICFkZWZhdWx0O1xyXG4kdG9vbHRpcC1wYWRkaW5nLXk6ICRzcGFjZXIgKiAwLjMxMjUgIWRlZmF1bHQ7XHJcbiR0b29sdGlwLXBhZGRpbmcteDogJHNwYWNlciAqIDAuNzUgIWRlZmF1bHQ7XHJcblxyXG4kdG9vbHRpcC1ib3gtc2hhZG93OiBub25lICFkZWZhdWx0OyAvLyAoQylcclxuXHJcbi8vICogUG9wb3ZlcnNcclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4kcG9wb3Zlci1mb250LXNpemU6ICRmb250LXNpemUtYmFzZSAhZGVmYXVsdDtcclxuJHBvcG92ZXItYmc6ICRjYXJkLWJnICFkZWZhdWx0O1xyXG4kcG9wb3Zlci1ib3JkZXItd2lkdGg6IDBweCAhZGVmYXVsdDtcclxuJHBvcG92ZXItYm94LXNoYWRvdzogJGJveC1zaGFkb3cgIWRlZmF1bHQ7XHJcblxyXG4kcG9wb3Zlci1oZWFkZXItYmc6ICRjYXJkLWJnICFkZWZhdWx0O1xyXG4kcG9wb3Zlci1oZWFkZXItY29sb3I6ICRoZWFkaW5ncy1jb2xvciAhZGVmYXVsdDtcclxuJHBvcG92ZXItaGVhZGVyLXBhZGRpbmcteTogJHNwYWNlciAhZGVmYXVsdDtcclxuJHBvcG92ZXItaGVhZGVyLXBhZGRpbmcteDogMS4xMjVyZW0gIWRlZmF1bHQ7XHJcblxyXG4kcG9wb3Zlci1ib2R5LWNvbG9yOiAkYm9keS1jb2xvciAhZGVmYXVsdDtcclxuJHBvcG92ZXItYm9keS1wYWRkaW5nLXk6IDEuMTI1cmVtICFkZWZhdWx0O1xyXG4kcG9wb3Zlci1ib2R5LXBhZGRpbmcteDogMS4xMjVyZW0gIWRlZmF1bHQ7XHJcblxyXG4vLyAqIFRvYXN0c1xyXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiR0b2FzdC1wYWRkaW5nLXk6IDAuNDA2cmVtICFkZWZhdWx0O1xyXG4kdG9hc3QtZm9udC1zaXplOiAkZm9udC1zaXplLWJhc2UgIWRlZmF1bHQ7XHJcbiR0b2FzdC1jb2xvcjogJGJvZHktY29sb3IgIWRlZmF1bHQ7XHJcbiR0b2FzdC1iYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKCRjYXJkLWJnLCAwLjg1KTtcclxuJHRvYXN0LWJvcmRlci13aWR0aDogMHB4ICFkZWZhdWx0O1xyXG4kdG9hc3QtaGVhZGVyLWJvcmRlci1jb2xvcjogcmdiYSgkYm9yZGVyLWNvbG9yLCAwLjMpICFkZWZhdWx0O1xyXG4kdG9hc3Qtc3BhY2luZzogMXJlbSAhZGVmYXVsdDtcclxuXHJcbiR0b2FzdC1oZWFkZXItY29sb3I6ICRoZWFkaW5ncy1jb2xvciAhZGVmYXVsdDtcclxuJHRvYXN0LWhlYWRlci1iYWNrZ3JvdW5kLWNvbG9yOiAkY2FyZC1iZyAhZGVmYXVsdDtcclxuXHJcbi8vICogQmFkZ2VzXHJcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbiRiYWRnZS1mb250LXNpemU6IDAuODFlbSAhZGVmYXVsdDtcclxuJGJhZGdlLWZvbnQtd2VpZ2h0OiAkZm9udC13ZWlnaHQtc2VtaWJvbGQgIWRlZmF1bHQ7XHJcbiRiYWRnZS1wYWRkaW5nLXk6IDAuNDllbSAhZGVmYXVsdDtcclxuJGJhZGdlLXBhZGRpbmcteDogMWVtICFkZWZhdWx0O1xyXG4kYmFkZ2UtYm9yZGVyLXJhZGl1czogMC4yNXJlbSAhZGVmYXVsdDtcclxuXHJcbiRiYWRnZS1waWxsLXBhZGRpbmcteDogMC41ODNlbSAhZGVmYXVsdDtcclxuJGJhZGdlLXBpbGwtYm9yZGVyLXJhZGl1czogMTByZW0gIWRlZmF1bHQ7XHJcblxyXG4kYmFkZ2UtaGVpZ2h0OiAxLjVyZW0gIWRlZmF1bHQ7IC8vIChDKVxyXG4kYmFkZ2Utd2lkdGg6IDEuNXJlbSAhZGVmYXVsdDsgLy8gKEMpXHJcbiRiYWRnZS1jZW50ZXItZm9udC1zaXplOiAwLjgxMnJlbSAhZGVmYXVsdDsgLy8gKEMpXHJcblxyXG4vLyAqIE1vZGFsc1xyXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG4kbW9kYWwtaW5uZXItcGFkZGluZzogMS41cmVtICFkZWZhdWx0O1xyXG5cclxuJG1vZGFsLWZvb3Rlci1tYXJnaW4tYmV0d2VlbjogMXJlbSAhZGVmYXVsdDtcclxuXHJcbiRtb2RhbC1kaWFsb2ctbWFyZ2luOiAkbW9kYWwtaW5uZXItcGFkZGluZyAhZGVmYXVsdDtcclxuXHJcbiRtb2RhbC1jb250ZW50LWJvcmRlci13aWR0aDogMHB4ICFkZWZhdWx0O1xyXG4kbW9kYWwtY29udGVudC1ib3JkZXItcmFkaXVzOiAkYm9yZGVyLXJhZGl1cyAhZGVmYXVsdDtcclxuJG1vZGFsLWNvbnRlbnQtYm94LXNoYWRvdy14czogJGZsb2F0aW5nLWNvbXBvbmVudC1zaGFkb3cgIWRlZmF1bHQ7XHJcbiRtb2RhbC1jb250ZW50LWJveC1zaGFkb3ctc20tdXA6ICRmbG9hdGluZy1jb21wb25lbnQtc2hhZG93ICFkZWZhdWx0O1xyXG4kbW9kYWwtYmFja2Ryb3Atb3BhY2l0eTogMC41ICFkZWZhdWx0O1xyXG4kbW9kYWwtaGVhZGVyLWJvcmRlci13aWR0aDogMHB4ICFkZWZhdWx0O1xyXG4kbW9kYWwtaGVhZGVyLXBhZGRpbmcteTogMS4yNXJlbSAhZGVmYXVsdDtcclxuJG1vZGFsLWhlYWRlci1wYWRkaW5nLXg6IDAuMjVyZW0gIWRlZmF1bHQ7XHJcbiRtb2RhbC1oZWFkZXItcGFkZGluZzogJG1vZGFsLWhlYWRlci1wYWRkaW5nLXkgJG1vZGFsLWlubmVyLXBhZGRpbmcgJG1vZGFsLWhlYWRlci1wYWRkaW5nLXggIWRlZmF1bHQ7XHJcbiRtb2RhbC1mb290ZXItcGFkZGluZzogJG1vZGFsLWhlYWRlci1wYWRkaW5nLXggJG1vZGFsLWlubmVyLXBhZGRpbmcgJG1vZGFsLWhlYWRlci1wYWRkaW5nLXkgIWRlZmF1bHQ7IC8vIChDKVxyXG5cclxuJG1vZGFsLWxnOiA1MHJlbSAhZGVmYXVsdDtcclxuJG1vZGFsLW1kOiAzNXJlbSAhZGVmYXVsdDtcclxuJG1vZGFsLXNtOiAyMi41cmVtICFkZWZhdWx0O1xyXG5cclxuJG1vZGFsLWZhZGUtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMDBweCkgc2NhbGUoMC44KSAhZGVmYXVsdDtcclxuJG1vZGFsLXNob3ctdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApIHNjYWxlKDEpICFkZWZhdWx0O1xyXG5cclxuJG1vZGFsLXRyYW5zaXRpb24tZHVyYXRpb246IDAuMTVzICFkZWZhdWx0OyAvLyAoQylcclxuJG1vZGFsLXRyYW5zaXRpb246IHRyYW5zZm9ybSAkbW9kYWwtdHJhbnNpdGlvbi1kdXJhdGlvbiBlYXNlLW91dCAhZGVmYXVsdDtcclxuXHJcbiRtb2RhbC1zaW1wbGUtcGFkZGluZzogM3JlbSAhZGVmYXVsdDsgLy8gKEMpXHJcbiRtb2RhbC1zaW1wbGUtY2xvc2UtcG9zaXRpb246IDFyZW0gIWRlZmF1bHQ7IC8vIChDKVxyXG5cclxuLy8gKiBBbGVydHNcclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuJGFsZXJ0LXBhZGRpbmcteTogJHNwYWNlciAqIDAuNjg3ICFkZWZhdWx0O1xyXG4kYWxlcnQtcGFkZGluZy14OiAkc3BhY2VyICogMC44NzUgIWRlZmF1bHQ7XHJcbiRhbGVydC1ib3JkZXItcmFkaXVzOiAkYm9yZGVyLXJhZGl1cyAhZGVmYXVsdDtcclxuJGFsZXJ0LWJnLXNjYWxlOiAtODQlICFkZWZhdWx0O1xyXG4kYWxlcnQtYm9yZGVyLXNjYWxlOiAtODQlICFkZWZhdWx0O1xyXG4kYWxlcnQtY29sb3Itc2NhbGU6IDAlICFkZWZhdWx0O1xyXG4kYWxlcnQtaWNvbi1iZzogJHdoaXRlICFkZWZhdWx0OyAvLyAoQylcclxuXHJcbi8vICogUHJvZ3Jlc3MgYmFyc1xyXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG4kcHJvZ3Jlc3MtaGVpZ2h0OiAwLjc1cmVtICFkZWZhdWx0O1xyXG4kcHJvZ3Jlc3MtZm9udC1zaXplOiAwLjc1cmVtICFkZWZhdWx0O1xyXG4kcHJvZ3Jlc3MtYmc6IHJnYmEtdG8taGV4KHJnYmEoJGdyYXktNTAwLCAwLjA4KSwgJHJnYmEtdG8taGV4LWJnKSAhZGVmYXVsdDtcclxuJHByb2dyZXNzLWJvcmRlci1yYWRpdXM6IDMuMTI1cmVtICFkZWZhdWx0O1xyXG4kcHJvZ3Jlc3MtYmFyLWNvbG9yOiAkd2hpdGUgIWRlZmF1bHQ7XHJcblxyXG4vLyBMaXN0IGdyb3VwXHJcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbi8vIHNjc3MtZG9jcy1zdGFydCBsaXN0LWdyb3VwLXZhcmlhYmxlc1xyXG4kbGlzdC1ncm91cC1jb2xvcjogJGJvZHktY29sb3IgIWRlZmF1bHQ7XHJcbiRsaXN0LWdyb3VwLWJnOiB0cmFuc3BhcmVudCAhZGVmYXVsdDtcclxuJGxpc3QtZ3JvdXAtYm9yZGVyLWNvbG9yOiAkYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xyXG4kbGlzdC1ncm91cC1pdGVtLXBhZGRpbmcteTogMC41N3JlbSAhZGVmYXVsdDtcclxuJGxpc3QtZ3JvdXAtaXRlbS1wYWRkaW5nLXg6IDEuMjVyZW0gIWRlZmF1bHQ7XHJcbiRsaXN0LWdyb3VwLWl0ZW0tYmctc2NhbGU6IC04NCUgIWRlZmF1bHQ7XHJcbiRsaXN0LWdyb3VwLWl0ZW0tYm9yZGVyLXNjYWxlOiAtODQlICFkZWZhdWx0OyAvLyAoQylcclxuJGxpc3QtZ3JvdXAtaXRlbS1jb2xvci1zY2FsZTogMCUgIWRlZmF1bHQ7XHJcbiRsaXN0LWdyb3VwLWl0ZW0tYmctaG92ZXItc2NhbGU6IDAlICFkZWZhdWx0OyAvLyAgKGMpXHJcblxyXG4kbGlzdC1ncm91cC1ob3Zlci1iZzogcmdiYS10by1oZXgoJGNvbXBvbmVudC1ob3Zlci1iZywgJHJnYmEtdG8taGV4LWJnKSAhZGVmYXVsdDtcclxuXHJcbiRsaXN0LWdyb3VwLWRpc2FibGVkLWNvbG9yOiAkdGV4dC1tdXRlZCAhZGVmYXVsdDtcclxuJGxpc3QtZ3JvdXAtZGlzYWJsZWQtYmc6ICRsaXN0LWdyb3VwLWJnICFkZWZhdWx0O1xyXG5cclxuJGxpc3QtZ3JvdXAtYWN0aW9uLWhvdmVyLWNvbG9yOiAkY29tcG9uZW50LWhvdmVyLWNvbG9yICFkZWZhdWx0O1xyXG5cclxuJGxpc3QtZ3JvdXAtYWN0aW9uLWFjdGl2ZS1jb2xvcjogJGNvbXBvbmVudC1hY3RpdmUtYmcgIWRlZmF1bHQ7XHJcbiRsaXN0LWdyb3VwLWFjdGlvbi1hY3RpdmUtYmc6ICRsaXN0LWdyb3VwLWhvdmVyLWJnICFkZWZhdWx0O1xyXG4vLyBzY3NzLWRvY3MtZW5kIGxpc3QtZ3JvdXAtdmFyaWFibGVzXHJcblxyXG4vLyAqIEltYWdlIHRodW1ibmFpbHNcclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuJHRodW1ibmFpbC1wYWRkaW5nOiAwICFkZWZhdWx0O1xyXG4kdGh1bWJuYWlsLWJnOiB0cmFuc3BhcmVudCAhZGVmYXVsdDtcclxuJHRodW1ibmFpbC1ib3JkZXItd2lkdGg6IDBweCAhZGVmYXVsdDtcclxuJHRodW1ibmFpbC1ib3JkZXItcmFkaXVzOiAwcHggIWRlZmF1bHQ7XHJcblxyXG4vLyAqIEZpZ3VyZXNcclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuJGZpZ3VyZS1jYXB0aW9uLWNvbG9yOiAkdGV4dC1tdXRlZCAhZGVmYXVsdDtcclxuXHJcbi8vICogQnJlYWRjcnVtYnNcclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuJGJyZWFkY3J1bWItcGFkZGluZy15OiAwICFkZWZhdWx0O1xyXG4kYnJlYWRjcnVtYi1wYWRkaW5nLXg6IDAgIWRlZmF1bHQ7XHJcbiRicmVhZGNydW1iLWl0ZW0tcGFkZGluZy14OiAwLjg3NXJlbSAhZGVmYXVsdDtcclxuJGJyZWFkY3J1bWItbWFyZ2luLWJvdHRvbTogMXJlbSAhZGVmYXVsdDtcclxuJGJyZWFkY3J1bWItYmc6IHRyYW5zcGFyZW50ICFkZWZhdWx0O1xyXG4kYnJlYWRjcnVtYi1kaXZpZGVyLWNvbG9yOiAkYmxhY2sgIWRlZmF1bHQ7XHJcbiRicmVhZGNydW1iLWFjdGl2ZS1jb2xvcjogJGJyZWFkY3J1bWItZGl2aWRlci1jb2xvciAhZGVmYXVsdDtcclxuJGJyZWFkY3J1bWItZGl2aWRlcjogdXJsKFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIGNsYXNzPSdpY29uIGljb24tdGFibGVyIGljb24tdGFibGVyLWNoZXZyb24tcmlnaHQnIHdpZHRoPScxNicgaGVpZ2h0PScyNCcgdmlld0JveD0nMCAwIDI0IDI0JyBzdHJva2Utd2lkdGg9JzEuNzUnIHN0cm9rZT0nI3skYnJlYWRjcnVtYi1kaXZpZGVyLWNvbG9yfScgZmlsbD0nbm9uZScgc3Ryb2tlLWxpbmVjYXA9J3JvdW5kJyBzdHJva2UtbGluZWpvaW49J3JvdW5kJyUzRSUzQ3BhdGggc3Ryb2tlPSdub25lJyBkPSdNMCAwaDI0djI0SDB6JyBmaWxsPSdub25lJyUzRSUzQy9wYXRoJTNFJTNDcG9seWxpbmUgcG9pbnRzPSc5IDYgMTUgMTIgOSAxOCclM0UlM0MvcG9seWxpbmUlM0UlM0Mvc3ZnJTNFXCIpICFkZWZhdWx0O1xyXG4kYnJlYWRjcnVtYi1kaXZpZGVyLWZsaXBwZWQ6IHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyBjbGFzcz0naWNvbiBpY29uLXRhYmxlciBpY29uLXRhYmxlci1jaGV2cm9uLWxlZnQnIHdpZHRoPScxNicgaGVpZ2h0PScyNCcgdmlld0JveD0nMCAwIDI0IDI0JyBzdHJva2Utd2lkdGg9JzEuNzUnIHN0cm9rZT0nI3skYnJlYWRjcnVtYi1kaXZpZGVyLWNvbG9yfScgZmlsbD0nbm9uZScgc3Ryb2tlLWxpbmVjYXA9J3JvdW5kJyBzdHJva2UtbGluZWpvaW49J3JvdW5kJyUzRSUzQ3BhdGggc3Ryb2tlPSdub25lJyBkPSdNMCAwaDI0djI0SDB6JyBmaWxsPSdub25lJyUzRSUzQy9wYXRoJTNFJTNDcG9seWxpbmUgcG9pbnRzPScxNSA2IDkgMTIgMTUgMTgnJTNFJTNDL3BvbHlsaW5lJTNFJTNDL3N2ZyUzRVwiKSAhZGVmYXVsdDtcclxuJGJyZWFkY3J1bWItY29sb3I6ICRjb21wb25lbnQtYWN0aXZlLWJnICFkZWZhdWx0OyAvLyAoQylcclxuXHJcbiRicmVhZGNydW1iLWRpdmlkZXItY2hlY2s6IHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyBjbGFzcz0naWNvbiBpY29uLXRhYmxlciBpY29uLXRhYmxlci1jaGVjaycgd2lkdGg9JzE2JyBoZWlnaHQ9JzI0JyB2aWV3Qm94PScwIDAgMjQgMjQnIHN0cm9rZS13aWR0aD0nMS43NScgc3Ryb2tlPScjeyRicmVhZGNydW1iLWRpdmlkZXItY29sb3J9JyBmaWxsPSdub25lJyBzdHJva2UtbGluZWNhcD0ncm91bmQnIHN0cm9rZS1saW5lam9pbj0ncm91bmQnJTNFJTNDcGF0aCBzdHJva2U9J25vbmUnIGQ9J00wIDBoMjR2MjRIMHonIGZpbGw9J25vbmUnJTNFJTNDL3BhdGglM0UlM0NwYXRoIGQ9J001IDEybDUgNWwxMCAtMTAnJTNFJTNDL3BhdGglM0UlM0Mvc3ZnJTNFXCIpO1xyXG5cclxuJGJyZWFkY3J1bWItaWNvbi1jaGVjay1zdmc6IHN0ci1yZXBsYWNlKFxyXG4gIHN0ci1yZXBsYWNlKCRicmVhZGNydW1iLWRpdmlkZXItY2hlY2ssICcjeyRicmVhZGNydW1iLWRpdmlkZXItY29sb3J9JywgJGJyZWFkY3J1bWItZGl2aWRlci1jb2xvciksXHJcbiAgJyMnLFxyXG4gICclMjMnXHJcbik7IC8vIChDKVxyXG5cclxuLy8gKiBDYXJvdXNlbFxyXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG4kY2Fyb3VzZWwtY29udHJvbC1jb2xvcjogJHdoaXRlICFkZWZhdWx0O1xyXG5cclxuJGNhcm91c2VsLWluZGljYXRvci13aWR0aDogMzRweCAhZGVmYXVsdDtcclxuJGNhcm91c2VsLWluZGljYXRvci1oZWlnaHQ6IDVweCAhZGVmYXVsdDtcclxuJGNhcm91c2VsLWluZGljYXRvci1oaXQtYXJlYS1oZWlnaHQ6IDAgIWRlZmF1bHQ7XHJcbiRjYXJvdXNlbC1pbmRpY2F0b3Itc3BhY2VyOiA1cHggIWRlZmF1bHQ7XHJcbiRjYXJvdXNlbC1pbmRpY2F0b3Itb3BhY2l0eTogMC40ICFkZWZhdWx0O1xyXG5cclxuJGNhcm91c2VsLWNhcHRpb24tc3BhY2VyOiAxLjQzN3JlbSAhZGVmYXVsdDtcclxuXHJcbiRjYXJvdXNlbC1jb250cm9sLWljb24td2lkdGg6IDIuNXJlbSAhZGVmYXVsdDtcclxuJGNhcm91c2VsLWNvbnRyb2wtcHJldi1pY29uLWJnOiB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIHdpZHRoPScxOCcgaGVpZ2h0PScxOCcgdmlld0JveD0nMCAwIDE4IDE4JyBmaWxsPSdub25lJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnJTNFJTNDcGF0aCBkPSdNMTEuMjUgNC41TDYuNzUgOUwxMS4yNSAxMy41JyBzdHJva2U9JyN7JGNhcm91c2VsLWNvbnRyb2wtY29sb3J9JyBzdHJva2Utd2lkdGg9JzEuNzUnIHN0cm9rZS1saW5lY2FwPSdyb3VuZCcgc3Ryb2tlLWxpbmVqb2luPSdyb3VuZCcvJTNFJTNDcGF0aCBkPSdNMTEuMjUgNC41TDYuNzUgOUwxMS4yNSAxMy41JyBzdHJva2U9J3doaXRlJyBzdHJva2Utb3BhY2l0eT0nMC4yJyBzdHJva2Utd2lkdGg9JzEuNzUnIHN0cm9rZS1saW5lY2FwPSdyb3VuZCcgc3Ryb2tlLWxpbmVqb2luPSdyb3VuZCcvJTNFJTNDL3N2ZyUzRSUwQVwiKSAhZGVmYXVsdDtcclxuXHJcbiRjYXJvdXNlbC1jb250cm9sLW5leHQtaWNvbi1iZzogdXJsKFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyB3aWR0aD0nMTknIGhlaWdodD0nMTgnIHZpZXdCb3g9JzAgMCAxOSAxOCcgZmlsbD0nbm9uZScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyUzRSUzQ3BhdGggZD0nTTcuMjUgNC41TDExLjc1IDlMNy4yNSAxMy41JyBzdHJva2U9JyN7JGNhcm91c2VsLWNvbnRyb2wtY29sb3J9JyBzdHJva2Utd2lkdGg9JzEuNzUnIHN0cm9rZS1saW5lY2FwPSdyb3VuZCcgc3Ryb2tlLWxpbmVqb2luPSdyb3VuZCcvJTNFJTNDcGF0aCBkPSdNNy4yNSA0LjVMMTEuNzUgOUw3LjI1IDEzLjUnIHN0cm9rZT0nd2hpdGUnIHN0cm9rZS1vcGFjaXR5PScwLjInIHN0cm9rZS13aWR0aD0nMS43NScgc3Ryb2tlLWxpbmVjYXA9J3JvdW5kJyBzdHJva2UtbGluZWpvaW49J3JvdW5kJy8lM0UlM0Mvc3ZnJTNFXCIpICFkZWZhdWx0O1xyXG5cclxuLy8gU3Bpbm5lcnNcclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuJHNwaW5uZXItd2lkdGgtbGc6IDNyZW0gIWRlZmF1bHQ7IC8vIChDKVxyXG4kc3Bpbm5lci1oZWlnaHQtbGc6ICRzcGlubmVyLXdpZHRoLWxnICFkZWZhdWx0OyAvLyAoQylcclxuJHNwaW5uZXItYm9yZGVyLXdpZHRoLWxnOiAwLjNlbSAhZGVmYXVsdDsgLy8gKEMpXHJcblxyXG4vLyAqIENsb3NlXHJcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbiRidG4tY2xvc2Utd2lkdGg6IDEuMTI1cmVtICFkZWZhdWx0O1xyXG4kYnRuLWNsb3NlLWNvbG9yOiAkYmxhY2sgIWRlZmF1bHQ7XHJcbiRidG4tY2xvc2UtYmc6IHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0Nzdmcgd2lkdGg9JzE5JyBoZWlnaHQ9JzE4JyB2aWV3Qm94PScwIDAgMTkgMTgnIGZpbGw9J25vbmUnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyclM0UlM0NwYXRoIGQ9J00xNCA0LjVMNSAxMy41JyBzdHJva2U9JyN7JGJ0bi1jbG9zZS1jb2xvcn0nIHN0cm9rZS13aWR0aD0nMS43NScgc3Ryb2tlLWxpbmVjYXA9J3JvdW5kJyBzdHJva2UtbGluZWpvaW49J3JvdW5kJy8lM0UlM0NwYXRoIGQ9J00xNCA0LjVMNSAxMy41JyBzdHJva2U9J3doaXRlJyBzdHJva2Utb3BhY2l0eT0nMC4yJyBzdHJva2Utd2lkdGg9JzEuNzUnIHN0cm9rZS1saW5lY2FwPSdyb3VuZCcgc3Ryb2tlLWxpbmVqb2luPSdyb3VuZCcvJTNFJTNDcGF0aCBkPSdNNSA0LjVMMTQgMTMuNScgc3Ryb2tlPScjeyRidG4tY2xvc2UtY29sb3J9JyBzdHJva2Utd2lkdGg9JzEuNzUnIHN0cm9rZS1saW5lY2FwPSdyb3VuZCcgc3Ryb2tlLWxpbmVqb2luPSdyb3VuZCcvJTNFJTNDcGF0aCBkPSdNNSA0LjVMMTQgMTMuNScgc3Ryb2tlPSd3aGl0ZScgc3Ryb2tlLW9wYWNpdHk9JzAuMicgc3Ryb2tlLXdpZHRoPScxLjc1JyBzdHJva2UtbGluZWNhcD0ncm91bmQnIHN0cm9rZS1saW5lam9pbj0ncm91bmQnLyUzRSUzQy9zdmclM0UlMEFcIikgIWRlZmF1bHQ7XHJcbiRidG4tY2xvc2UtZm9jdXMtc2hhZG93OiBub25lICFkZWZhdWx0O1xyXG4kYnRuLWNsb3NlLWZvY3VzLW9wYWNpdHk6IDAuNzUgIWRlZmF1bHQ7XHJcblxyXG4kY2xvc2UtZm9udC13ZWlnaHQ6IDMwMCAhZGVmYXVsdDsgLy8gKEMpXHJcblxyXG4vLyAqIE9mZmNhbnZhc1xyXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG4vLyBzY3NzLWRvY3Mtc3RhcnQgb2ZmY2FudmFzLXZhcmlhYmxlc1xyXG4kb2ZmY2FudmFzLXRyYW5zaXRpb24tZHVyYXRpb246IDAuMjVzICFkZWZhdWx0O1xyXG4vLyBzY3NzLWRvY3MtZW5kIG9mZmNhbnZhcy12YXJpYWJsZXNcclxuXHJcbi8vIFV0aWxpdGllc1xyXG4kb3ZlcmZsb3dzOiBhdXRvLCBoaWRkZW4sIHNjcm9sbCwgdmlzaWJsZSAhZGVmYXVsdDtcclxuXHJcbi8vIENvbmZpZ1xyXG4kcnRsLXN1cHBvcnQ6IGZhbHNlICFkZWZhdWx0O1xyXG4kZGFyay1zdHlsZTogZmFsc2UgIWRlZmF1bHQ7XHJcblxyXG4vLyBVc2VmdWwgSWNvbnNcclxuJHVwbG9hZC1pY29uOiB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycgY2xhc3M9J2ljb24gaWNvbi10YWJsZXIgaWNvbi10YWJsZXItdXBsb2FkJyB3aWR0aD0nMjQnIGhlaWdodD0nMjQnIHZpZXdCb3g9JzAgMCAyNCAyNCcgc3Ryb2tlLXdpZHRoPScyJyBzdHJva2U9J2N1cnJlbnRDb2xvcicgZmlsbD0nbm9uZScgc3Ryb2tlLWxpbmVjYXA9J3JvdW5kJyBzdHJva2UtbGluZWpvaW49J3JvdW5kJyUzRSUzQ3BhdGggc3Ryb2tlPSdub25lJyBkPSdNMCAwaDI0djI0SDB6JyBmaWxsPSdub25lJy8lM0UlM0NwYXRoIGQ9J000IDE3djJhMiAyIDAgMCAwIDIgMmgxMmEyIDIgMCAwIDAgMiAtMnYtMicgLyUzRSUzQ3BvbHlsaW5lIHBvaW50cz0nNyA5IDEyIDQgMTcgOScgLyUzRSUzQ2xpbmUgeDE9JzEyJyB5MT0nNCcgeDI9JzEyJyB5Mj0nMTYnIC8lM0UlM0Mvc3ZnJTNFXCIpO1xyXG4iLCIvLyBCcmVha3BvaW50IHZpZXdwb3J0IHNpemVzIGFuZCBtZWRpYSBxdWVyaWVzLlxuLy9cbi8vIEJyZWFrcG9pbnRzIGFyZSBkZWZpbmVkIGFzIGEgbWFwIG9mIChuYW1lOiBtaW5pbXVtIHdpZHRoKSwgb3JkZXIgZnJvbSBzbWFsbCB0byBsYXJnZTpcbi8vXG4vLyAgICAoeHM6IDAsIHNtOiA1NzZweCwgbWQ6IDc2OHB4LCBsZzogOTkycHgsIHhsOiAxMjAwcHgsIHh4bDogMTQwMHB4KVxuLy9cbi8vIFRoZSBtYXAgZGVmaW5lZCBpbiB0aGUgYCRncmlkLWJyZWFrcG9pbnRzYCBnbG9iYWwgdmFyaWFibGUgaXMgdXNlZCBhcyB0aGUgYCRicmVha3BvaW50c2AgYXJndW1lbnQgYnkgZGVmYXVsdC5cblxuLy8gTmFtZSBvZiB0aGUgbmV4dCBicmVha3BvaW50LCBvciBudWxsIGZvciB0aGUgbGFzdCBicmVha3BvaW50LlxuLy9cbi8vICAgID4+IGJyZWFrcG9pbnQtbmV4dChzbSlcbi8vICAgIG1kXG4vLyAgICA+PiBicmVha3BvaW50LW5leHQoc20sICh4czogMCwgc206IDU3NnB4LCBtZDogNzY4cHgsIGxnOiA5OTJweCwgeGw6IDEyMDBweCwgeHhsOiAxNDAwcHgpKVxuLy8gICAgbWRcbi8vICAgID4+IGJyZWFrcG9pbnQtbmV4dChzbSwgJGJyZWFrcG9pbnQtbmFtZXM6ICh4cyBzbSBtZCBsZyB4bCB4eGwpKVxuLy8gICAgbWRcbkBmdW5jdGlvbiBicmVha3BvaW50LW5leHQoJG5hbWUsICRicmVha3BvaW50czogJGdyaWQtYnJlYWtwb2ludHMsICRicmVha3BvaW50LW5hbWVzOiBtYXAta2V5cygkYnJlYWtwb2ludHMpKSB7XG4gICRuOiBpbmRleCgkYnJlYWtwb2ludC1uYW1lcywgJG5hbWUpO1xuICBAaWYgbm90ICRuIHtcbiAgICBAZXJyb3IgXCJicmVha3BvaW50IGAjeyRuYW1lfWAgbm90IGZvdW5kIGluIGAjeyRicmVha3BvaW50c31gXCI7XG4gIH1cbiAgQHJldHVybiBpZigkbiA8IGxlbmd0aCgkYnJlYWtwb2ludC1uYW1lcyksIG50aCgkYnJlYWtwb2ludC1uYW1lcywgJG4gKyAxKSwgbnVsbCk7XG59XG5cbi8vIE1pbmltdW0gYnJlYWtwb2ludCB3aWR0aC4gTnVsbCBmb3IgdGhlIHNtYWxsZXN0IChmaXJzdCkgYnJlYWtwb2ludC5cbi8vXG4vLyAgICA+PiBicmVha3BvaW50LW1pbihzbSwgKHhzOiAwLCBzbTogNTc2cHgsIG1kOiA3NjhweCwgbGc6IDk5MnB4LCB4bDogMTIwMHB4LCB4eGw6IDE0MDBweCkpXG4vLyAgICA1NzZweFxuQGZ1bmN0aW9uIGJyZWFrcG9pbnQtbWluKCRuYW1lLCAkYnJlYWtwb2ludHM6ICRncmlkLWJyZWFrcG9pbnRzKSB7XG4gICRtaW46IG1hcC1nZXQoJGJyZWFrcG9pbnRzLCAkbmFtZSk7XG4gIEByZXR1cm4gaWYoJG1pbiAhPSAwLCAkbWluLCBudWxsKTtcbn1cblxuLy8gTWF4aW11bSBicmVha3BvaW50IHdpZHRoLlxuLy8gVGhlIG1heGltdW0gdmFsdWUgaXMgcmVkdWNlZCBieSAwLjAycHggdG8gd29yayBhcm91bmQgdGhlIGxpbWl0YXRpb25zIG9mXG4vLyBgbWluLWAgYW5kIGBtYXgtYCBwcmVmaXhlcyBhbmQgdmlld3BvcnRzIHdpdGggZnJhY3Rpb25hbCB3aWR0aHMuXG4vLyBTZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL21lZGlhcXVlcmllcy00LyNtcS1taW4tbWF4XG4vLyBVc2VzIDAuMDJweCByYXRoZXIgdGhhbiAwLjAxcHggdG8gd29yayBhcm91bmQgYSBjdXJyZW50IHJvdW5kaW5nIGJ1ZyBpbiBTYWZhcmkuXG4vLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE3ODI2MVxuLy9cbi8vICAgID4+IGJyZWFrcG9pbnQtbWF4KG1kLCAoeHM6IDAsIHNtOiA1NzZweCwgbWQ6IDc2OHB4LCBsZzogOTkycHgsIHhsOiAxMjAwcHgsIHh4bDogMTQwMHB4KSlcbi8vICAgIDc2Ny45OHB4XG5AZnVuY3Rpb24gYnJlYWtwb2ludC1tYXgoJG5hbWUsICRicmVha3BvaW50czogJGdyaWQtYnJlYWtwb2ludHMpIHtcbiAgJG1heDogbWFwLWdldCgkYnJlYWtwb2ludHMsICRuYW1lKTtcbiAgQHJldHVybiBpZigkbWF4IGFuZCAkbWF4ID4gMCwgJG1heCAtIC4wMiwgbnVsbCk7XG59XG5cbi8vIFJldHVybnMgYSBibGFuayBzdHJpbmcgaWYgc21hbGxlc3QgYnJlYWtwb2ludCwgb3RoZXJ3aXNlIHJldHVybnMgdGhlIG5hbWUgd2l0aCBhIGRhc2ggaW4gZnJvbnQuXG4vLyBVc2VmdWwgZm9yIG1ha2luZyByZXNwb25zaXZlIHV0aWxpdGllcy5cbi8vXG4vLyAgICA+PiBicmVha3BvaW50LWluZml4KHhzLCAoeHM6IDAsIHNtOiA1NzZweCwgbWQ6IDc2OHB4LCBsZzogOTkycHgsIHhsOiAxMjAwcHgsIHh4bDogMTQwMHB4KSlcbi8vICAgIFwiXCIgIChSZXR1cm5zIGEgYmxhbmsgc3RyaW5nKVxuLy8gICAgPj4gYnJlYWtwb2ludC1pbmZpeChzbSwgKHhzOiAwLCBzbTogNTc2cHgsIG1kOiA3NjhweCwgbGc6IDk5MnB4LCB4bDogMTIwMHB4LCB4eGw6IDE0MDBweCkpXG4vLyAgICBcIi1zbVwiXG5AZnVuY3Rpb24gYnJlYWtwb2ludC1pbmZpeCgkbmFtZSwgJGJyZWFrcG9pbnRzOiAkZ3JpZC1icmVha3BvaW50cykge1xuICBAcmV0dXJuIGlmKGJyZWFrcG9pbnQtbWluKCRuYW1lLCAkYnJlYWtwb2ludHMpID09IG51bGwsIFwiXCIsIFwiLSN7JG5hbWV9XCIpO1xufVxuXG4vLyBNZWRpYSBvZiBhdCBsZWFzdCB0aGUgbWluaW11bSBicmVha3BvaW50IHdpZHRoLiBObyBxdWVyeSBmb3IgdGhlIHNtYWxsZXN0IGJyZWFrcG9pbnQuXG4vLyBNYWtlcyB0aGUgQGNvbnRlbnQgYXBwbHkgdG8gdGhlIGdpdmVuIGJyZWFrcG9pbnQgYW5kIHdpZGVyLlxuQG1peGluIG1lZGlhLWJyZWFrcG9pbnQtdXAoJG5hbWUsICRicmVha3BvaW50czogJGdyaWQtYnJlYWtwb2ludHMpIHtcbiAgJG1pbjogYnJlYWtwb2ludC1taW4oJG5hbWUsICRicmVha3BvaW50cyk7XG4gIEBpZiAkbWluIHtcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogJG1pbikge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG4vLyBNZWRpYSBvZiBhdCBtb3N0IHRoZSBtYXhpbXVtIGJyZWFrcG9pbnQgd2lkdGguIE5vIHF1ZXJ5IGZvciB0aGUgbGFyZ2VzdCBicmVha3BvaW50LlxuLy8gTWFrZXMgdGhlIEBjb250ZW50IGFwcGx5IHRvIHRoZSBnaXZlbiBicmVha3BvaW50IGFuZCBuYXJyb3dlci5cbkBtaXhpbiBtZWRpYS1icmVha3BvaW50LWRvd24oJG5hbWUsICRicmVha3BvaW50czogJGdyaWQtYnJlYWtwb2ludHMpIHtcbiAgJG1heDogYnJlYWtwb2ludC1tYXgoJG5hbWUsICRicmVha3BvaW50cyk7XG4gIEBpZiAkbWF4IHtcbiAgICBAbWVkaWEgKG1heC13aWR0aDogJG1heCkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG4vLyBNZWRpYSB0aGF0IHNwYW5zIG11bHRpcGxlIGJyZWFrcG9pbnQgd2lkdGhzLlxuLy8gTWFrZXMgdGhlIEBjb250ZW50IGFwcGx5IGJldHdlZW4gdGhlIG1pbiBhbmQgbWF4IGJyZWFrcG9pbnRzXG5AbWl4aW4gbWVkaWEtYnJlYWtwb2ludC1iZXR3ZWVuKCRsb3dlciwgJHVwcGVyLCAkYnJlYWtwb2ludHM6ICRncmlkLWJyZWFrcG9pbnRzKSB7XG4gICRtaW46IGJyZWFrcG9pbnQtbWluKCRsb3dlciwgJGJyZWFrcG9pbnRzKTtcbiAgJG1heDogYnJlYWtwb2ludC1tYXgoJHVwcGVyLCAkYnJlYWtwb2ludHMpO1xuXG4gIEBpZiAkbWluICE9IG51bGwgYW5kICRtYXggIT0gbnVsbCB7XG4gICAgQG1lZGlhIChtaW4td2lkdGg6ICRtaW4pIGFuZCAobWF4LXdpZHRoOiAkbWF4KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJG1heCA9PSBudWxsIHtcbiAgICBAaW5jbHVkZSBtZWRpYS1icmVha3BvaW50LXVwKCRsb3dlciwgJGJyZWFrcG9pbnRzKSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJG1pbiA9PSBudWxsIHtcbiAgICBAaW5jbHVkZSBtZWRpYS1icmVha3BvaW50LWRvd24oJHVwcGVyLCAkYnJlYWtwb2ludHMpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxufVxuXG4vLyBNZWRpYSBiZXR3ZWVuIHRoZSBicmVha3BvaW50J3MgbWluaW11bSBhbmQgbWF4aW11bSB3aWR0aHMuXG4vLyBObyBtaW5pbXVtIGZvciB0aGUgc21hbGxlc3QgYnJlYWtwb2ludCwgYW5kIG5vIG1heGltdW0gZm9yIHRoZSBsYXJnZXN0IG9uZS5cbi8vIE1ha2VzIHRoZSBAY29udGVudCBhcHBseSBvbmx5IHRvIHRoZSBnaXZlbiBicmVha3BvaW50LCBub3Qgdmlld3BvcnRzIGFueSB3aWRlciBvciBuYXJyb3dlci5cbkBtaXhpbiBtZWRpYS1icmVha3BvaW50LW9ubHkoJG5hbWUsICRicmVha3BvaW50czogJGdyaWQtYnJlYWtwb2ludHMpIHtcbiAgJG1pbjogIGJyZWFrcG9pbnQtbWluKCRuYW1lLCAkYnJlYWtwb2ludHMpO1xuICAkbmV4dDogYnJlYWtwb2ludC1uZXh0KCRuYW1lLCAkYnJlYWtwb2ludHMpO1xuICAkbWF4OiAgYnJlYWtwb2ludC1tYXgoJG5leHQsICRicmVha3BvaW50cyk7XG5cbiAgQGlmICRtaW4gIT0gbnVsbCBhbmQgJG1heCAhPSBudWxsIHtcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogJG1pbikgYW5kIChtYXgtd2lkdGg6ICRtYXgpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfSBAZWxzZSBpZiAkbWF4ID09IG51bGwge1xuICAgIEBpbmNsdWRlIG1lZGlhLWJyZWFrcG9pbnQtdXAoJG5hbWUsICRicmVha3BvaW50cykge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIGlmICRtaW4gPT0gbnVsbCB7XG4gICAgQGluY2x1ZGUgbWVkaWEtYnJlYWtwb2ludC1kb3duKCRuZXh0LCAkYnJlYWtwb2ludHMpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxufVxuIiwiLy8gVmFyaWFibGVzXHJcbi8vXHJcbi8vIFZhcmlhYmxlcyBzaG91bGQgZm9sbG93IHRoZSBgJGNvbXBvbmVudC1zdGF0ZS1wcm9wZXJ0eS1zaXplYCBmb3JtdWxhIGZvclxyXG4vLyBjb25zaXN0ZW50IG5hbWluZy4gRXg6ICRuYXYtbGluay1kaXNhYmxlZC1jb2xvciBhbmQgJG1vZGFsLWNvbnRlbnQtYm94LXNoYWRvdy14cy5cclxuLy9cclxuLy8gKEMpIEN1c3RvbSB2YXJpYWJsZXMgZm9yIGV4dGVuZGVkIGNvbXBvbmVudHMgb2YgYm9vdHN0cmFwIG9ubHlcclxuXHJcbi8vICEgX3ZhcmlhYmxlLWRhcmsuc2NzcyBmaWxlIG92ZXJyaWRlcyBfdmFyaWFibGUuc2NzcyBmaWxlLlxyXG5cclxuLy8gKiBDb2xvcnNcclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuLy8gc2Nzcy1kb2NzLXN0YXJ0IGdyYXktY29sb3ItdmFyaWFibGVzXHJcbiR3aGl0ZTogI2ZmZiAhZGVmYXVsdDtcclxuJGJsYWNrOiAjMDAwICFkZWZhdWx0O1xyXG5cclxuJGJhc2U6ICM4NjkyZDAgIWRlZmF1bHQ7XHJcbiRncmF5LTI1OiByZ2JhKCR3aGl0ZSwgMC4wMTUpICFkZWZhdWx0OyAvLyAoQylcclxuJGdyYXktNTA6IHJnYmEoJHdoaXRlLCAwLjAzKSAhZGVmYXVsdDsgLy8gKEMpXHJcbiRncmF5LTEwMDogcmdiYSgkd2hpdGUsIDAuOCkgIWRlZmF1bHQ7XHJcbiRncmF5LTIwMDogcmdiYSgkd2hpdGUsIDAuNikgIWRlZmF1bHQ7XHJcbiRncmF5LTMwMDogcmdiYSgkd2hpdGUsIDAuNCkgIWRlZmF1bHQ7XHJcbiRncmF5LTQwMDogcmdiYSgkd2hpdGUsIDAuMykgIWRlZmF1bHQ7XHJcbiRncmF5LTUwMDogJGJhc2UgIWRlZmF1bHQ7XHJcbiRncmF5LTYwMDogcmdiYSgkYmxhY2ssIDAuMSkgIWRlZmF1bHQ7XHJcbiRncmF5LTcwMDogcmdiYSgkYmxhY2ssIDAuMykgIWRlZmF1bHQ7XHJcbiRncmF5LTgwMDogcmdiYSgkYmxhY2ssIDAuNDUpICFkZWZhdWx0O1xyXG4kZ3JheS05MDA6IHJnYmEoJGJsYWNrLCAwLjY1KSAhZGVmYXVsdDtcclxuLy8gc2Nzcy1kb2NzLWVuZCBncmF5LWNvbG9yLXZhcmlhYmxlc1xyXG5cclxuLy8gc2Nzcy1kb2NzLXN0YXJ0IGdyYXktY29sb3JzLW1hcFxyXG4kZ3JheXM6IChcclxuICAnMjUnOiAkZ3JheS0yNSxcclxuICAnNTAnOiAkZ3JheS01MFxyXG4pICFkZWZhdWx0O1xyXG4vLyBzY3NzLWRvY3MtZW5kIGdyYXktY29sb3JzLW1hcFxyXG5cclxuLy8gc2Nzcy1kb2NzLXN0YXJ0IGNvbG9yLXZhcmlhYmxlc1xyXG4kYmx1ZTogIzAwN2JmZiAhZGVmYXVsdDtcclxuJGluZGlnbzogIzY2MTBmMiAhZGVmYXVsdDtcclxuJHB1cnBsZTogIzczNjdmMCAhZGVmYXVsdDtcclxuJHBpbms6ICNlODNlOGMgIWRlZmF1bHQ7XHJcbiRyZWQ6ICNlYTU0NTUgIWRlZmF1bHQ7XHJcbiRvcmFuZ2U6ICNmZDdlMTQgIWRlZmF1bHQ7XHJcbiR5ZWxsb3c6ICNmZjlmNDMgIWRlZmF1bHQ7XHJcbiRncmVlbjogIzI4Yzc2ZiAhZGVmYXVsdDtcclxuJHRlYWw6ICMyMGM5OTcgIWRlZmF1bHQ7XHJcbiRjeWFuOiAjMDBjZmU4ICFkZWZhdWx0O1xyXG4vLyBzY3NzLWRvY3MtZW5kIGNvbG9yLXZhcmlhYmxlc1xyXG5cclxuLy8gc2Nzcy1kb2NzLXN0YXJ0IHRoZW1lLWNvbG9yLXZhcmlhYmxlc1xyXG4kcHJpbWFyeTogJHB1cnBsZSAhZGVmYXVsdDtcclxuJHNlY29uZGFyeTogI2E4YWFhZSAhZGVmYXVsdDtcclxuJHN1Y2Nlc3M6ICRncmVlbiAhZGVmYXVsdDtcclxuJGluZm86ICRjeWFuICFkZWZhdWx0O1xyXG4kd2FybmluZzogJHllbGxvdyAhZGVmYXVsdDtcclxuJGRhbmdlcjogJHJlZCAhZGVmYXVsdDtcclxuJGxpZ2h0OiAjNDQ0NzViICFkZWZhdWx0O1xyXG4kZGFyazogI2Q3ZDhkZSAhZGVmYXVsdDtcclxuJGdyYXk6ICRncmF5LTEwMCAhZGVmYXVsdDsgLy8gKEMpXHJcbi8vIHNjc3MtZG9jcy1lbmQgdGhlbWUtY29sb3ItdmFyaWFibGVzXHJcblxyXG4vLyBzY3NzLWRvY3Mtc3RhcnQgdGhlbWUtY29sb3JzLW1hcFxyXG4kdGhlbWUtY29sb3JzOiAoXHJcbiAgJ3ByaW1hcnknOiAkcHJpbWFyeSxcclxuICAnc2Vjb25kYXJ5JzogJHNlY29uZGFyeSxcclxuICAnc3VjY2Vzcyc6ICRzdWNjZXNzLFxyXG4gICdpbmZvJzogJGluZm8sXHJcbiAgJ3dhcm5pbmcnOiAkd2FybmluZyxcclxuICAnZGFuZ2VyJzogJGRhbmdlcixcclxuICAnbGlnaHQnOiAkbGlnaHQsXHJcbiAgJ2RhcmsnOiAkZGFyayxcclxuICAnZ3JheSc6ICRncmF5XHJcbikgIWRlZmF1bHQ7XHJcbi8vIHNjc3MtZG9jcy1lbmQgdGhlbWUtY29sb3JzLW1hcFxyXG5cclxuJGNvbG9yLXNjaGVtZTogJ2RhcmsnICFkZWZhdWx0OyAvLyAoQylcclxuXHJcbi8vICogQm9keVxyXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG4kYm9keS1iZzogIzI1MjkzYyAhZGVmYXVsdDtcclxuJHJnYmEtdG8taGV4LWJnOiAkYmFzZSAhZGVmYXVsdDsgLy8gKEMpXHJcbiRib2R5LWNvbG9yOiByZ2JhLXRvLWhleCgkZ3JheS0zMDAsICRyZ2JhLXRvLWhleC1iZykgIWRlZmF1bHQ7XHJcbiRyZ2JhLXRvLWhleC1iZy1pbnZlcnRlZDogcmdiKDE2MCwgMTQ5LCAxNDkpICFkZWZhdWx0OyAvLyAoQylcclxuXHJcbi8vICogQ29tcG9uZW50c1xyXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG4kYWxlcnQtYmctc2NhbGU6IC04NCUgIWRlZmF1bHQ7XHJcbiRhbGVydC1ib3JkZXItc2NhbGU6IC04NCUgIWRlZmF1bHQ7XHJcbiRhbGVydC1jb2xvci1zY2FsZTogMCUgIWRlZmF1bHQ7XHJcbiRhbGVydC1pY29uLWJnOiAjMjgzMDQ2ICFkZWZhdWx0OyAvLyAoQylcclxuXHJcbi8vICRib3JkZXItY29sb3I6IHJnYmEtdG8taGV4KHJnYmEoJHdoaXRlLCAwLjEpLCAkcmdiYS10by1oZXgtYmcpICFkZWZhdWx0O1xyXG4vLyAkYm9yZGVyLWlubmVyLWNvbG9yOiByZ2JhLXRvLWhleChyZ2JhKCR3aGl0ZSwgMC4wOSksICRyZ2JhLXRvLWhleC1iZykgIWRlZmF1bHQ7IC8vIChDKVxyXG4kYm9yZGVyLWNvbG9yOiAjNDM0OTY4ICFkZWZhdWx0O1xyXG4kYm9yZGVyLWlubmVyLWNvbG9yOiByZ2JhKCR3aGl0ZSwgMC4wOSkgIWRlZmF1bHQ7IC8vIChDKVxyXG5cclxuLy8gc2Nzcy1kb2NzLXN0YXJ0IGJveC1zaGFkb3ctdmFyaWFibGVzXHJcbiRib3gtc2hhZG93OiAwIDAuMjVyZW0gMXJlbSByZ2JhKDE1LCAyMCwgMzQsIDAuNTUpICFkZWZhdWx0O1xyXG4kYm94LXNoYWRvdy1zbTogMCAwLjEyNXJlbSAwLjI1cmVtIHJnYmEoMTUsIDIwLCAzNCwgMC40KSAhZGVmYXVsdDtcclxuJGJveC1zaGFkb3ctbGc6IDAgMC42MjVyZW0gMS4yNXJlbSByZ2JhKDE1LCAyMCwgMzQsIDAuNSkgIWRlZmF1bHQ7XHJcbi8vIHNjc3MtZG9jcy1lbmQgYm94LXNoYWRvdy12YXJpYWJsZXNcclxuXHJcbiRmbG9hdGluZy1jb21wb25lbnQtYm9yZGVyLWNvbG9yOiByZ2JhKCR3aGl0ZSwgMC4wNSkgIWRlZmF1bHQ7IC8vIChDKVxyXG4kZmxvYXRpbmctY29tcG9uZW50LXNoYWRvdzogMCAwLjMxcmVtIDEuMjVyZW0gMCByZ2JhKCRibGFjaywgMC40KSAhZGVmYXVsdDsgLy8gKEMpXHJcblxyXG4vLyAqIFR5cG9ncmFwaHlcclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuJHRleHQtbXV0ZWQ6IHJnYmEtdG8taGV4KCRncmF5LTYwMCwgJHJnYmEtdG8taGV4LWJnKSAhZGVmYXVsdDtcclxuJHRleHQtbXV0ZWQtaG92ZXI6IHJnYmEtdG8taGV4KCR3aGl0ZSwgJHJnYmEtdG8taGV4LWJnKSAhZGVmYXVsdDsgLy8gKEMpXHJcblxyXG4kdGV4dC1saWdodDogcmdiYS10by1oZXgoJGdyYXktNTAwLCAkcmdiYS10by1oZXgtYmcpICFkZWZhdWx0OyAvLyAoQylcclxuJHRleHQtbGlnaHRlcjogcmdiYS10by1oZXgoJGdyYXktNDAwLCAkcmdiYS10by1oZXgtYmcpICFkZWZhdWx0OyAvLyAoQylcclxuJHRleHQtbGlnaHRlc3Q6IHJnYmEtdG8taGV4KCRncmF5LTMwMCwgJHJnYmEtdG8taGV4LWJnKSAhZGVmYXVsdDsgLy8gKEMpXHJcblxyXG4kaGVhZGluZ3MtY29sb3I6IHJnYmEtdG8taGV4KCRncmF5LTIwMCwgJHJnYmEtdG8taGV4LWJnKSAhZGVmYXVsdDtcclxuXHJcbi8vICogQ2FyZHNcclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuJGNhcmQtYmc6ICMyZjMzNDkgIWRlZmF1bHQ7XHJcbiRjYXJkLWJveC1zaGFkb3c6IDAgMC4yNXJlbSAxLjI1cmVtIHJnYmEoMTUsIDIwLCAzNCwgMC40KSAhZGVmYXVsdDtcclxuXHJcbi8vICogVGFibGVzXHJcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbiR0YWJsZS1zdHJpcGVkLWJnLWZhY3RvcjogMC4wMiAhZGVmYXVsdDtcclxuJHRhYmxlLXN0cmlwZWQtYmc6IHJnYmEtdG8taGV4KHJnYmEoJGJhc2UsICR0YWJsZS1zdHJpcGVkLWJnLWZhY3RvciksICRjYXJkLWJnKSAhZGVmYXVsdDtcclxuXHJcbiR0YWJsZS1ob3Zlci1iZy1mYWN0b3I6IDAuMDggIWRlZmF1bHQ7XHJcbiR0YWJsZS1ob3Zlci1iZzogcmdiYSgkYmFzZSwgJHRhYmxlLWhvdmVyLWJnLWZhY3RvcikgIWRlZmF1bHQ7XHJcblxyXG4vLyAqIEFjY29yZGlvblxyXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiRhY2NvcmRpb24tYmc6ICRjYXJkLWJnICFkZWZhdWx0O1xyXG4kYWNjb3JkaW9uLWJvcmRlci1jb2xvcjogJGFjY29yZGlvbi1iZyAhZGVmYXVsdDtcclxuXHJcbiRhY2NvcmRpb24tYnV0dG9uLWNvbG9yOiAkaGVhZGluZ3MtY29sb3IgIWRlZmF1bHQ7XHJcblxyXG4vLyAqIFRvb2x0aXBzXHJcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuJHRvb2x0aXAtYmc6IHJnYmEtdG8taGV4KCRncmF5LTgwMCwgJHJnYmEtdG8taGV4LWJnKSAhZGVmYXVsdDtcclxuXHJcbi8vIEJ1dHRvbnNcclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuJGJ0bi1ib3gtc2hhZG93OiAwcHggMnB4IDRweCByZ2JhKDE1LCAyMCwgMzQsIDAuNCkgIWRlZmF1bHQ7XHJcblxyXG4vLyAqIEZvcm1zXHJcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbiRpbnB1dC1iZzogJGNhcmQtYmcgIWRlZmF1bHQ7XHJcbiRpbnB1dC1kaXNhYmxlZC1iZzogcmdiYSgkYmFzZSwgMC4wOCkgIWRlZmF1bHQ7XHJcblxyXG4kaW5wdXQtcGxhY2Vob2xkZXItY29sb3I6IHJnYmEtdG8taGV4KCRncmF5LTcwMCwgJHJnYmEtdG8taGV4LWJnKSAhZGVmYXVsdDtcclxuXHJcbiRmb3JtLWNoZWNrLWlucHV0LWJvcmRlcjogMXB4IHNvbGlkICRncmF5LTUwMDtcclxuXHJcbiRmb3JtLWNoZWNrLWlucHV0LWRpc2FibGVkLWJnOiByZ2JhLXRvLWhleCgkZ3JheS04MDAsICRyZ2JhLXRvLWhleC1iZykgIWRlZmF1bHQ7IC8vIChDKVxyXG5cclxuJGZvcm0tc3dpdGNoLWNvbG9yOiByZ2JhLXRvLWhleChyZ2JhKCR3aGl0ZSwgMC4xNSksICRyZ2JhLXRvLWhleC1iZykgIWRlZmF1bHQ7XHJcblxyXG4kZm9ybS1yYW5nZS10aHVtYi1iZzogcmdiYS10by1oZXgocmdiYSgkd2hpdGUsIDAuNSksICRyZ2JhLXRvLWhleC1iZykgIWRlZmF1bHQ7XHJcblxyXG4vLyAqIE5hdnNcclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuJG5hdi10YWJzLWxpbmstYWN0aXZlLWJnOiAkY2FyZC1iZyAhZGVmYXVsdDtcclxuXHJcbi8vICogTmF2YmFyXHJcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbiRuYXZiYXItbGlnaHQtaG92ZXItY29sb3I6ICM0ZTUxNTUgIWRlZmF1bHQ7XHJcbiRuYXZiYXItbGlnaHQtYWN0aXZlLWNvbG9yOiAjNGU1MTU1ICFkZWZhdWx0O1xyXG4kbmF2YmFyLWxpZ2h0LWRpc2FibGVkLWNvbG9yOiByZ2JhKCRibGFjaywgMC4yKSAhZGVmYXVsdDtcclxuJG5hdmJhci1kcm9wZG93bi1ob3Zlci1iZzogcmdiYSgkYmFzZSwgMC4wNikgIWRlZmF1bHQ7IC8vIChDKVxyXG4kbmF2YmFyLWRyb3Bkb3duLWljb24tYmc6IHJnYmEoJGJhc2UsIDAuMDgpICFkZWZhdWx0OyAvLyAoQylcclxuXHJcbi8vICogRHJvcGRvd25zXHJcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuXHJcbiRkcm9wZG93bi1iZzogJGNhcmQtYmcgIWRlZmF1bHQ7XHJcblxyXG4vLyAqIFBhZ2luYXRpb25cclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuJHBhZ2luYXRpb24tYmc6IHJnYmEoJGJhc2UsIDAuMDgpICFkZWZhdWx0O1xyXG5cclxuJHBhZ2luYXRpb24tZm9jdXMtYmc6IHJnYmEoJGJhc2UsIDAuMTYpICFkZWZhdWx0O1xyXG5cclxuLy8gKiBQb3BvdmVyc1xyXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiRwb3BvdmVyLWJvZHktY29sb3I6IHJnYmEtdG8taGV4KCRncmF5LTUwLCAkcmdiYS10by1oZXgtYmcpICFkZWZhdWx0O1xyXG5cclxuLy8gKiBNb2RhbFxyXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiRtb2RhbC1jb250ZW50LWJnOiAkY2FyZC1iZyAhZGVmYXVsdDtcclxuXHJcbi8vICogUHJvZ3Jlc3MgYmFyc1xyXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiRwcm9ncmVzcy1iZzogcmdiYS10by1oZXgocmdiYSgkZ3JheS01MDAsIDAuMDgpLCAkY2FyZC1iZykgIWRlZmF1bHQ7XHJcblxyXG4vLyAqIExpc3QgZ3JvdXBcclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5cclxuJGxpc3QtZ3JvdXAtaG92ZXItYmc6IHJnYmEtdG8taGV4KHJnYmEoJHByaW1hcnksIDAuMDgpLCAkY2FyZC1iZykgIWRlZmF1bHQ7XHJcbiRsaXN0LWdyb3VwLWFjdGlvbi1hY3RpdmUtYmc6ICRsaXN0LWdyb3VwLWhvdmVyLWJnICFkZWZhdWx0O1xyXG5cclxuLy8gKiBCcmVhZGNydW1ic1xyXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcblxyXG4kYnJlYWRjcnVtYi1kaXZpZGVyLWNvbG9yOiAkYmFzZSAhZGVmYXVsdDtcclxuXHJcbi8vICogQ2xvc2VcclxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4kYnRuLWNsb3NlLWNvbG9yOiAkd2hpdGUgIWRlZmF1bHQ7XHJcblxyXG4ka2JkLWNvbG9yOiAkZGFyayAhZGVmYXVsdDtcclxuXHJcbi8vICogQ29uZmlnXHJcbiRydGwtc3VwcG9ydDogZmFsc2UgIWRlZmF1bHQ7XHJcbiRkYXJrLXN0eWxlOiB0cnVlICFkZWZhdWx0O1xyXG4iXX0= */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
